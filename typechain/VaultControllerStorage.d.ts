/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface VaultControllerStorageInterface extends ethers.utils.Interface {
  functions: {
    "initializeVaultControllerStorage()": FunctionFragment;
    "rewardBoostDuration()": FunctionFragment;
    "rewardRatioWithoutBoost()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "initializeVaultControllerStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBoostDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRatioWithoutBoost",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "initializeVaultControllerStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardBoostDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardRatioWithoutBoost",
    data: BytesLike
  ): Result;

  events: {
    "UpdatedAddressSlot(string,address,address)": EventFragment;
    "UpdatedUint256Slot(string,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UpdatedAddressSlot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedUint256Slot"): EventFragment;
}

export class VaultControllerStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VaultControllerStorageInterface;

  functions: {
    initializeVaultControllerStorage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardBoostDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardRatioWithoutBoost(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  initializeVaultControllerStorage(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardBoostDuration(overrides?: CallOverrides): Promise<BigNumber>;

  rewardRatioWithoutBoost(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    initializeVaultControllerStorage(overrides?: CallOverrides): Promise<void>;

    rewardBoostDuration(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRatioWithoutBoost(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    UpdatedAddressSlot(
      name?: string | null,
      oldValue?: null,
      newValue?: null
    ): TypedEventFilter<
      [string, string, string],
      { name: string; oldValue: string; newValue: string }
    >;

    UpdatedUint256Slot(
      name?: string | null,
      oldValue?: null,
      newValue?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { name: string; oldValue: BigNumber; newValue: BigNumber }
    >;
  };

  estimateGas: {
    initializeVaultControllerStorage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardBoostDuration(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRatioWithoutBoost(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    initializeVaultControllerStorage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardBoostDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardRatioWithoutBoost(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
