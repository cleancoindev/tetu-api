/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ICurveRegistryInterface extends ethers.utils.Interface {
  functions: {
    "find_pool_for_coins(address,address,uint256)": FunctionFragment;
    "get_balances(address)": FunctionFragment;
    "get_coin_indices(address,address,address)": FunctionFragment;
    "get_coins(address)": FunctionFragment;
    "get_decimals(address)": FunctionFragment;
    "get_lp_token(address)": FunctionFragment;
    "get_pool_from_lp_token(address)": FunctionFragment;
    "get_underlying_balances(address)": FunctionFragment;
    "get_underlying_coins(address)": FunctionFragment;
    "get_underlying_decimals(address)": FunctionFragment;
    "pool_count()": FunctionFragment;
    "pool_list(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "find_pool_for_coins",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_balances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "get_coin_indices",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "get_coins", values: [string]): string;
  encodeFunctionData(
    functionFragment: "get_decimals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "get_lp_token",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "get_pool_from_lp_token",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "get_underlying_balances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "get_underlying_coins",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "get_underlying_decimals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pool_count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pool_list",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "find_pool_for_coins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_coin_indices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_coins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_decimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_lp_token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_pool_from_lp_token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_underlying_balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_underlying_coins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_underlying_decimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool_count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool_list", data: BytesLike): Result;

  events: {};
}

export class ICurveRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ICurveRegistryInterface;

  functions: {
    find_pool_for_coins(
      _from: string,
      _to: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    get_balances(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ]
      ]
    >;

    get_coin_indices(
      _pool: string,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, boolean]>;

    get_coins(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [[string, string, string, string, string, string, string, string]]
    >;

    get_decimals(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ]
      ]
    >;

    get_lp_token(_pool: string, overrides?: CallOverrides): Promise<[string]>;

    get_pool_from_lp_token(
      _lp_token: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    get_underlying_balances(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ]
      ]
    >;

    get_underlying_coins(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [[string, string, string, string, string, string, string, string]]
    >;

    get_underlying_decimals(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ]
      ]
    >;

    pool_count(overrides?: CallOverrides): Promise<[BigNumber]>;

    pool_list(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  find_pool_for_coins(
    _from: string,
    _to: string,
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  get_balances(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  get_coin_indices(
    _pool: string,
    _from: string,
    _to: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, boolean]>;

  get_coins(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<[string, string, string, string, string, string, string, string]>;

  get_decimals(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  get_lp_token(_pool: string, overrides?: CallOverrides): Promise<string>;

  get_pool_from_lp_token(
    _lp_token: string,
    overrides?: CallOverrides
  ): Promise<string>;

  get_underlying_balances(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  get_underlying_coins(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<[string, string, string, string, string, string, string, string]>;

  get_underlying_decimals(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  pool_count(overrides?: CallOverrides): Promise<BigNumber>;

  pool_list(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    find_pool_for_coins(
      _from: string,
      _to: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    get_balances(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    get_coin_indices(
      _pool: string,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, boolean]>;

    get_coins(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string, string]
    >;

    get_decimals(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    get_lp_token(_pool: string, overrides?: CallOverrides): Promise<string>;

    get_pool_from_lp_token(
      _lp_token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    get_underlying_balances(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    get_underlying_coins(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string, string]
    >;

    get_underlying_decimals(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    pool_count(overrides?: CallOverrides): Promise<BigNumber>;

    pool_list(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    find_pool_for_coins(
      _from: string,
      _to: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_balances(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    get_coin_indices(
      _pool: string,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_coins(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    get_decimals(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    get_lp_token(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    get_pool_from_lp_token(
      _lp_token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_underlying_balances(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_underlying_coins(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_underlying_decimals(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pool_count(overrides?: CallOverrides): Promise<BigNumber>;

    pool_list(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    find_pool_for_coins(
      _from: string,
      _to: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_balances(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_coin_indices(
      _pool: string,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_coins(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_decimals(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_lp_token(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_pool_from_lp_token(
      _lp_token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_underlying_balances(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_underlying_coins(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_underlying_decimals(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pool_count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool_list(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
