/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PayrollClerkInterface extends ethers.utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "addWorker(address,uint256,string,string,bool)": FunctionFragment;
    "addWorkers(address[],uint256[],string[],string[],bool[])": FunctionFragment;
    "allWorkers()": FunctionFragment;
    "baseHourlyRates(address)": FunctionFragment;
    "boostActivated(address)": FunctionFragment;
    "calculator()": FunctionFragment;
    "changeTokens(address[],uint256[])": FunctionFragment;
    "changeWorkerAddress(address,address)": FunctionFragment;
    "computeSalary(address,uint256,address)": FunctionFragment;
    "controller()": FunctionFragment;
    "created()": FunctionFragment;
    "earned(address)": FunctionFragment;
    "hourlyRate(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "initializeControllable(address)": FunctionFragment;
    "isController(address)": FunctionFragment;
    "isGovernance(address)": FunctionFragment;
    "moveTokensToController(address,uint256)": FunctionFragment;
    "multiplePay(address[],uint256[])": FunctionFragment;
    "pay(address,uint256)": FunctionFragment;
    "setBaseHourlyRate(address,uint256)": FunctionFragment;
    "setCalculator(address)": FunctionFragment;
    "setWorkerName(address,string)": FunctionFragment;
    "setWorkerRole(address,string)": FunctionFragment;
    "switchBoost(address,bool)": FunctionFragment;
    "tokenRatios(address)": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
    "workedHours(address)": FunctionFragment;
    "workerIndex(address)": FunctionFragment;
    "workerNames(address)": FunctionFragment;
    "workerRoles(address)": FunctionFragment;
    "workers(uint256)": FunctionFragment;
    "workersLength()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addWorker",
    values: [string, BigNumberish, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addWorkers",
    values: [string[], BigNumberish[], string[], string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allWorkers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseHourlyRates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "boostActivated",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeTokens",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeWorkerAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "computeSalary",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "created", values?: undefined): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;
  encodeFunctionData(functionFragment: "hourlyRate", values: [string]): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initializeControllable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "moveTokensToController",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplePay",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseHourlyRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCalculator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWorkerName",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWorkerRole",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "switchBoost",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "tokenRatios", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "workedHours", values: [string]): string;
  encodeFunctionData(functionFragment: "workerIndex", values: [string]): string;
  encodeFunctionData(functionFragment: "workerNames", values: [string]): string;
  encodeFunctionData(functionFragment: "workerRoles", values: [string]): string;
  encodeFunctionData(
    functionFragment: "workers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "workersLength",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addWorker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addWorkers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allWorkers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseHourlyRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boostActivated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "calculator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeWorkerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "created", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hourlyRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeControllable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveTokensToController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplePay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBaseHourlyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWorkerName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWorkerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRatios",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "workedHours",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workerNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workerRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "workersLength",
    data: BytesLike
  ): Result;

  events: {
    "SalaryPaid(address,uint256,uint256,uint256)": EventFragment;
    "TokenChanged(address[],uint256[])": EventFragment;
    "TokenMoved(address,uint256)": EventFragment;
    "UpdateCalculator(address,address)": EventFragment;
    "UpdateController(address,address)": EventFragment;
    "WorkerNameUpdated(address,string)": EventFragment;
    "WorkerRateUpdated(address,uint256)": EventFragment;
    "WorkerRoleUpdated(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SalaryPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCalculator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WorkerNameUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WorkerRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WorkerRoleUpdated"): EventFragment;
}

export class PayrollClerk extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PayrollClerkInterface;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    addWorker(
      worker: string,
      rate: BigNumberish,
      name: string,
      role: string,
      boost: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addWorkers(
      _workers: string[],
      rates: BigNumberish[],
      names: string[],
      roles: string[],
      boosts: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allWorkers(overrides?: CallOverrides): Promise<[string[]]>;

    baseHourlyRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    boostActivated(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    calculator(overrides?: CallOverrides): Promise<[string] & { adr: string }>;

    changeTokens(
      _tokens: string[],
      ratios: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeWorkerAddress(
      oldWallet: string,
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    computeSalary(
      worker: string,
      _workedHours: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { salaryUsd: BigNumber; salaryToken: BigNumber }
    >;

    controller(overrides?: CallOverrides): Promise<[string] & { adr: string }>;

    created(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ts: BigNumber }>;

    earned(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    hourlyRate(worker: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isController(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    moveTokensToController(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiplePay(
      _workers: string[],
      _workedHours: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pay(
      worker: string,
      _workedHours: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseHourlyRate(
      worker: string,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCalculator(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWorkerName(
      worker: string,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWorkerRole(
      worker: string,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    switchBoost(
      worker: string,
      active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenRatios(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    workedHours(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    workerIndex(
      worker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    workerNames(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    workerRoles(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    workers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    workersLength(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  addWorker(
    worker: string,
    rate: BigNumberish,
    name: string,
    role: string,
    boost: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addWorkers(
    _workers: string[],
    rates: BigNumberish[],
    names: string[],
    roles: string[],
    boosts: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allWorkers(overrides?: CallOverrides): Promise<string[]>;

  baseHourlyRates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  boostActivated(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  calculator(overrides?: CallOverrides): Promise<string>;

  changeTokens(
    _tokens: string[],
    ratios: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeWorkerAddress(
    oldWallet: string,
    newWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  computeSalary(
    worker: string,
    _workedHours: BigNumberish,
    token: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { salaryUsd: BigNumber; salaryToken: BigNumber }
  >;

  controller(overrides?: CallOverrides): Promise<string>;

  created(overrides?: CallOverrides): Promise<BigNumber>;

  earned(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  hourlyRate(worker: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeControllable(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isController(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  isGovernance(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  moveTokensToController(
    _token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiplePay(
    _workers: string[],
    _workedHours: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pay(
    worker: string,
    _workedHours: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseHourlyRate(
    worker: string,
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCalculator(
    _newValue: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWorkerName(
    worker: string,
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWorkerRole(
    worker: string,
    role: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  switchBoost(
    worker: string,
    active: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenRatios(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  workedHours(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  workerIndex(worker: string, overrides?: CallOverrides): Promise<BigNumber>;

  workerNames(arg0: string, overrides?: CallOverrides): Promise<string>;

  workerRoles(arg0: string, overrides?: CallOverrides): Promise<string>;

  workers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  workersLength(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    addWorker(
      worker: string,
      rate: BigNumberish,
      name: string,
      role: string,
      boost: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    addWorkers(
      _workers: string[],
      rates: BigNumberish[],
      names: string[],
      roles: string[],
      boosts: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    allWorkers(overrides?: CallOverrides): Promise<string[]>;

    baseHourlyRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boostActivated(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    calculator(overrides?: CallOverrides): Promise<string>;

    changeTokens(
      _tokens: string[],
      ratios: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    changeWorkerAddress(
      oldWallet: string,
      newWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    computeSalary(
      worker: string,
      _workedHours: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { salaryUsd: BigNumber; salaryToken: BigNumber }
    >;

    controller(overrides?: CallOverrides): Promise<string>;

    created(overrides?: CallOverrides): Promise<BigNumber>;

    earned(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    hourlyRate(worker: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_controller: string, overrides?: CallOverrides): Promise<void>;

    initializeControllable(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isController(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    moveTokensToController(
      _token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    multiplePay(
      _workers: string[],
      _workedHours: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    pay(
      worker: string,
      _workedHours: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseHourlyRate(
      worker: string,
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCalculator(_newValue: string, overrides?: CallOverrides): Promise<void>;

    setWorkerName(
      worker: string,
      name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWorkerRole(
      worker: string,
      role: string,
      overrides?: CallOverrides
    ): Promise<void>;

    switchBoost(
      worker: string,
      active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenRatios(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    workedHours(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    workerIndex(worker: string, overrides?: CallOverrides): Promise<BigNumber>;

    workerNames(arg0: string, overrides?: CallOverrides): Promise<string>;

    workerRoles(arg0: string, overrides?: CallOverrides): Promise<string>;

    workers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    workersLength(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    SalaryPaid(
      worker?: string | null,
      usdAmount?: null,
      workedHours?: null,
      rate?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        worker: string;
        usdAmount: BigNumber;
        workedHours: BigNumber;
        rate: BigNumber;
      }
    >;

    TokenChanged(
      tokens?: null,
      ratios?: null
    ): TypedEventFilter<
      [string[], BigNumber[]],
      { tokens: string[]; ratios: BigNumber[] }
    >;

    TokenMoved(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    UpdateCalculator(
      oldValue?: null,
      newValue?: null
    ): TypedEventFilter<
      [string, string],
      { oldValue: string; newValue: string }
    >;

    UpdateController(
      oldValue?: null,
      newValue?: null
    ): TypedEventFilter<
      [string, string],
      { oldValue: string; newValue: string }
    >;

    WorkerNameUpdated(
      worker?: string | null,
      value?: null
    ): TypedEventFilter<[string, string], { worker: string; value: string }>;

    WorkerRateUpdated(
      worker?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { worker: string; value: BigNumber }
    >;

    WorkerRoleUpdated(
      worker?: string | null,
      value?: null
    ): TypedEventFilter<[string, string], { worker: string; value: string }>;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addWorker(
      worker: string,
      rate: BigNumberish,
      name: string,
      role: string,
      boost: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addWorkers(
      _workers: string[],
      rates: BigNumberish[],
      names: string[],
      roles: string[],
      boosts: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allWorkers(overrides?: CallOverrides): Promise<BigNumber>;

    baseHourlyRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boostActivated(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    calculator(overrides?: CallOverrides): Promise<BigNumber>;

    changeTokens(
      _tokens: string[],
      ratios: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeWorkerAddress(
      oldWallet: string,
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    computeSalary(
      worker: string,
      _workedHours: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    created(overrides?: CallOverrides): Promise<BigNumber>;

    earned(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    hourlyRate(worker: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isController(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    moveTokensToController(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiplePay(
      _workers: string[],
      _workedHours: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pay(
      worker: string,
      _workedHours: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseHourlyRate(
      worker: string,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCalculator(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWorkerName(
      worker: string,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWorkerRole(
      worker: string,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    switchBoost(
      worker: string,
      active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenRatios(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    workedHours(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    workerIndex(worker: string, overrides?: CallOverrides): Promise<BigNumber>;

    workerNames(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    workerRoles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    workers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    workersLength(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addWorker(
      worker: string,
      rate: BigNumberish,
      name: string,
      role: string,
      boost: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addWorkers(
      _workers: string[],
      rates: BigNumberish[],
      names: string[],
      roles: string[],
      boosts: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allWorkers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseHourlyRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boostActivated(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeTokens(
      _tokens: string[],
      ratios: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeWorkerAddress(
      oldWallet: string,
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    computeSalary(
      worker: string,
      _workedHours: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    created(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earned(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hourlyRate(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isController(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGovernance(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moveTokensToController(
      _token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiplePay(
      _workers: string[],
      _workedHours: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pay(
      worker: string,
      _workedHours: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseHourlyRate(
      worker: string,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCalculator(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWorkerName(
      worker: string,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWorkerRole(
      worker: string,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    switchBoost(
      worker: string,
      active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenRatios(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workedHours(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workerIndex(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workerNames(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workerRoles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workersLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
