/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IAnnouncerInterface extends ethers.utils.Interface {
  functions: {
    "announceRatioChange(uint8,uint256,uint256)": FunctionFragment;
    "clearAnnounce(bytes32,uint8,address)": FunctionFragment;
    "timeLockInfo(uint256)": FunctionFragment;
    "timeLockSchedule(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "announceRatioChange",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clearAnnounce",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "timeLockInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timeLockSchedule",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "announceRatioChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearAnnounce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeLockInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeLockSchedule",
    data: BytesLike
  ): Result;

  events: {};
}

export class IAnnouncer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAnnouncerInterface;

  functions: {
    announceRatioChange(
      opCode: BigNumberish,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clearAnnounce(
      opHash: BytesLike,
      opCode: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timeLockInfo(
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timeLockSchedule(
      opHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  announceRatioChange(
    opCode: BigNumberish,
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clearAnnounce(
    opHash: BytesLike,
    opCode: BigNumberish,
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timeLockInfo(
    idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timeLockSchedule(
    opHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    announceRatioChange(
      opCode: BigNumberish,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    clearAnnounce(
      opHash: BytesLike,
      opCode: BigNumberish,
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    timeLockInfo(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, string[], BigNumber[]] & {
        opCode: number;
        opHash: string;
        target: string;
        adrValues: string[];
        numValues: BigNumber[];
      }
    >;

    timeLockSchedule(
      opHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    announceRatioChange(
      opCode: BigNumberish,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clearAnnounce(
      opHash: BytesLike,
      opCode: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timeLockInfo(
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timeLockSchedule(
      opHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    announceRatioChange(
      opCode: BigNumberish,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clearAnnounce(
      opHash: BytesLike,
      opCode: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timeLockInfo(
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timeLockSchedule(
      opHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
