/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PriceCalculatorInterface extends ethers.utils.Interface {
  functions: {
    "DEPTH()": FunctionFragment;
    "PRECISION_DECIMALS()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "addKeyToken(address)": FunctionFragment;
    "addKeyTokens(address[])": FunctionFragment;
    "addSwapPlatform(address,string)": FunctionFragment;
    "checkFactory(address,address)": FunctionFragment;
    "computePrice(address,address,address[],uint256)": FunctionFragment;
    "controller()": FunctionFragment;
    "created()": FunctionFragment;
    "defaultToken()": FunctionFragment;
    "getLargestPool(address,address[])": FunctionFragment;
    "getLpForFactory(address,address,address)": FunctionFragment;
    "getLpSize(address,address)": FunctionFragment;
    "getLpUnderlying(address)": FunctionFragment;
    "getPrice(address,address)": FunctionFragment;
    "getPriceFromLp(address,address)": FunctionFragment;
    "getPriceWithDefaultOutput(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "initializeControllable(address)": FunctionFragment;
    "isController(address)": FunctionFragment;
    "isGovernance(address)": FunctionFragment;
    "isKeyToken(address)": FunctionFragment;
    "isSwapFactoryToken(address)": FunctionFragment;
    "isSwapName(string)": FunctionFragment;
    "isSwapPlatform(address)": FunctionFragment;
    "keyTokens(uint256)": FunctionFragment;
    "keyTokensSize()": FunctionFragment;
    "removeKeyToken(address)": FunctionFragment;
    "removeSwapPlatform(address,string)": FunctionFragment;
    "setDefaultToken(address)": FunctionFragment;
    "swapFactories(uint256)": FunctionFragment;
    "swapFactoriesSize()": FunctionFragment;
    "swapLpNames(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DEPTH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PRECISION_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "addKeyToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addKeyTokens",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addSwapPlatform",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkFactory",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "computePrice",
    values: [string, string, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "created", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "defaultToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLargestPool",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpForFactory",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpSize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFromLp",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceWithDefaultOutput",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initializeControllable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isGovernance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isKeyToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isSwapFactoryToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isSwapName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isSwapPlatform",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "keyTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "keyTokensSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeKeyToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSwapPlatform",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapFactories",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapFactoriesSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapLpNames",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "DEPTH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PRECISION_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addKeyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addKeyTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSwapPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "created", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLargestPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpForFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLpSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLpUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFromLp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceWithDefaultOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeControllable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isKeyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSwapFactoryToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSwapName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSwapPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keyTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keyTokensSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeKeyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSwapPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFactories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFactoriesSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapLpNames",
    data: BytesLike
  ): Result;

  events: {
    "DefaultTokenChanged(address,address)": EventFragment;
    "KeyTokenAdded(address)": EventFragment;
    "KeyTokenRemoved(address)": EventFragment;
    "SwapPlatformAdded(address,string)": EventFragment;
    "SwapPlatformRemoved(address,string)": EventFragment;
    "UpdateController(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DefaultTokenChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeyTokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeyTokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapPlatformAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapPlatformRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateController"): EventFragment;
}

export class PriceCalculator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PriceCalculatorInterface;

  functions: {
    DEPTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    addKeyToken(
      newToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addKeyTokens(
      newTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSwapPlatform(
      _factoryAddress: string,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkFactory(
      pair: string,
      compareFactory: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    computePrice(
      token: string,
      outputToken: string,
      usedLps: string[],
      deep: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string] & { adr: string }>;

    created(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ts: BigNumber }>;

    defaultToken(
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    getLargestPool(
      token: string,
      usedLps: string[],
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getLpForFactory(
      _factory: string,
      token: string,
      tokenOpposite: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    getLpSize(
      pairAddress: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLpUnderlying(
      lpAddress: string,
      overrides?: CallOverrides
    ): Promise<[[string, string], [BigNumber, BigNumber]]>;

    getPrice(
      token: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceFromLp(
      lpAddress: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceWithDefaultOutput(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isController(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isKeyToken(token: string, overrides?: CallOverrides): Promise<[boolean]>;

    isSwapFactoryToken(
      adr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSwapName(name: string, overrides?: CallOverrides): Promise<[boolean]>;

    isSwapPlatform(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    keyTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    keyTokensSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeKeyToken(
      keyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSwapPlatform(
      _factoryAddress: string,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultToken(
      _newDefaultToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapFactories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    swapFactoriesSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapLpNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  DEPTH(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  addKeyToken(
    newToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addKeyTokens(
    newTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSwapPlatform(
    _factoryAddress: string,
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkFactory(
    pair: string,
    compareFactory: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  computePrice(
    token: string,
    outputToken: string,
    usedLps: string[],
    deep: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  controller(overrides?: CallOverrides): Promise<string>;

  created(overrides?: CallOverrides): Promise<BigNumber>;

  defaultToken(overrides?: CallOverrides): Promise<string>;

  getLargestPool(
    token: string,
    usedLps: string[],
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getLpForFactory(
    _factory: string,
    token: string,
    tokenOpposite: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string]>;

  getLpSize(
    pairAddress: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLpUnderlying(
    lpAddress: string,
    overrides?: CallOverrides
  ): Promise<[[string, string], [BigNumber, BigNumber]]>;

  getPrice(
    token: string,
    outputToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceFromLp(
    lpAddress: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceWithDefaultOutput(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeControllable(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isController(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  isGovernance(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  isKeyToken(token: string, overrides?: CallOverrides): Promise<boolean>;

  isSwapFactoryToken(adr: string, overrides?: CallOverrides): Promise<boolean>;

  isSwapName(name: string, overrides?: CallOverrides): Promise<boolean>;

  isSwapPlatform(token: string, overrides?: CallOverrides): Promise<boolean>;

  keyTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  keyTokensSize(overrides?: CallOverrides): Promise<BigNumber>;

  removeKeyToken(
    keyToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSwapPlatform(
    _factoryAddress: string,
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultToken(
    _newDefaultToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapFactories(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  swapFactoriesSize(overrides?: CallOverrides): Promise<BigNumber>;

  swapLpNames(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEPTH(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    addKeyToken(newToken: string, overrides?: CallOverrides): Promise<void>;

    addKeyTokens(newTokens: string[], overrides?: CallOverrides): Promise<void>;

    addSwapPlatform(
      _factoryAddress: string,
      _name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    checkFactory(
      pair: string,
      compareFactory: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    computePrice(
      token: string,
      outputToken: string,
      usedLps: string[],
      deep: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<string>;

    created(overrides?: CallOverrides): Promise<BigNumber>;

    defaultToken(overrides?: CallOverrides): Promise<string>;

    getLargestPool(
      token: string,
      usedLps: string[],
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getLpForFactory(
      _factory: string,
      token: string,
      tokenOpposite: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    getLpSize(
      pairAddress: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLpUnderlying(
      lpAddress: string,
      overrides?: CallOverrides
    ): Promise<[[string, string], [BigNumber, BigNumber]]>;

    getPrice(
      token: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceFromLp(
      lpAddress: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceWithDefaultOutput(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(_controller: string, overrides?: CallOverrides): Promise<void>;

    initializeControllable(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isController(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    isKeyToken(token: string, overrides?: CallOverrides): Promise<boolean>;

    isSwapFactoryToken(
      adr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSwapName(name: string, overrides?: CallOverrides): Promise<boolean>;

    isSwapPlatform(token: string, overrides?: CallOverrides): Promise<boolean>;

    keyTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    keyTokensSize(overrides?: CallOverrides): Promise<BigNumber>;

    removeKeyToken(keyToken: string, overrides?: CallOverrides): Promise<void>;

    removeSwapPlatform(
      _factoryAddress: string,
      _name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultToken(
      _newDefaultToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapFactories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    swapFactoriesSize(overrides?: CallOverrides): Promise<BigNumber>;

    swapLpNames(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    DefaultTokenChanged(
      oldToken?: null,
      newToken?: null
    ): TypedEventFilter<
      [string, string],
      { oldToken: string; newToken: string }
    >;

    KeyTokenAdded(
      newKeyToken?: null
    ): TypedEventFilter<[string], { newKeyToken: string }>;

    KeyTokenRemoved(
      keyToken?: null
    ): TypedEventFilter<[string], { keyToken: string }>;

    SwapPlatformAdded(
      factoryAddress?: null,
      name?: null
    ): TypedEventFilter<
      [string, string],
      { factoryAddress: string; name: string }
    >;

    SwapPlatformRemoved(
      factoryAddress?: null,
      name?: null
    ): TypedEventFilter<
      [string, string],
      { factoryAddress: string; name: string }
    >;

    UpdateController(
      oldValue?: null,
      newValue?: null
    ): TypedEventFilter<
      [string, string],
      { oldValue: string; newValue: string }
    >;
  };

  estimateGas: {
    DEPTH(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addKeyToken(
      newToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addKeyTokens(
      newTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSwapPlatform(
      _factoryAddress: string,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkFactory(
      pair: string,
      compareFactory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computePrice(
      token: string,
      outputToken: string,
      usedLps: string[],
      deep: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    created(overrides?: CallOverrides): Promise<BigNumber>;

    defaultToken(overrides?: CallOverrides): Promise<BigNumber>;

    getLargestPool(
      token: string,
      usedLps: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLpForFactory(
      _factory: string,
      token: string,
      tokenOpposite: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLpSize(
      pairAddress: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLpUnderlying(
      lpAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      token: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceFromLp(
      lpAddress: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceWithDefaultOutput(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isController(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isKeyToken(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    isSwapFactoryToken(
      adr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSwapName(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    isSwapPlatform(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keyTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keyTokensSize(overrides?: CallOverrides): Promise<BigNumber>;

    removeKeyToken(
      keyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSwapPlatform(
      _factoryAddress: string,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultToken(
      _newDefaultToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapFactories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapFactoriesSize(overrides?: CallOverrides): Promise<BigNumber>;

    swapLpNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEPTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addKeyToken(
      newToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addKeyTokens(
      newTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSwapPlatform(
      _factoryAddress: string,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkFactory(
      pair: string,
      compareFactory: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computePrice(
      token: string,
      outputToken: string,
      usedLps: string[],
      deep: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    created(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLargestPool(
      token: string,
      usedLps: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLpForFactory(
      _factory: string,
      token: string,
      tokenOpposite: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLpSize(
      pairAddress: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLpUnderlying(
      lpAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      token: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceFromLp(
      lpAddress: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceWithDefaultOutput(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isController(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGovernance(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKeyToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSwapFactoryToken(
      adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSwapName(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSwapPlatform(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keyTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keyTokensSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeKeyToken(
      keyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSwapPlatform(
      _factoryAddress: string,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultToken(
      _newDefaultToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapFactories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapFactoriesSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapLpNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
