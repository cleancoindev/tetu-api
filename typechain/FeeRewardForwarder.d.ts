/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FeeRewardForwarderInterface extends ethers.utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "controller()": FunctionFragment;
    "created()": FunctionFragment;
    "distribute(uint256,address,address)": FunctionFragment;
    "fund()": FunctionFragment;
    "fundToken()": FunctionFragment;
    "hasValidRoute(address,address)": FunctionFragment;
    "initializeControllable(address)": FunctionFragment;
    "isController(address)": FunctionFragment;
    "isGovernance(address)": FunctionFragment;
    "isMultiRouter(address,address)": FunctionFragment;
    "notifyCustomPool(address,address,uint256)": FunctionFragment;
    "notifyPsPool(address,uint256)": FunctionFragment;
    "psVault()": FunctionFragment;
    "routers(address,address,uint256)": FunctionFragment;
    "routes(address,address,uint256)": FunctionFragment;
    "setConversionPath(address[],address[])": FunctionFragment;
    "targetToken()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "created", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "fund", values?: undefined): string;
  encodeFunctionData(functionFragment: "fundToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasValidRoute",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeControllable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isMultiRouter",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyCustomPool",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyPsPool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "psVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "routers",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "routes",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setConversionPath",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "targetToken",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "created", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fundToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasValidRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeControllable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMultiRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyCustomPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyPsPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "psVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "routers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "routes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setConversionPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetToken",
    data: BytesLike
  ): Result;

  events: {
    "FeeMovedToFund(address,address,uint256)": EventFragment;
    "FeeMovedToPs(address,address,uint256)": EventFragment;
    "FeeMovedToVault(address,address,uint256)": EventFragment;
    "UpdateController(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeMovedToFund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeMovedToPs"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeMovedToVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateController"): EventFragment;
}

export class FeeRewardForwarder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FeeRewardForwarderInterface;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    controller(overrides?: CallOverrides): Promise<[string] & { adr: string }>;

    created(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ts: BigNumber }>;

    distribute(
      _amount: BigNumberish,
      _token: string,
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fund(overrides?: CallOverrides): Promise<[string]>;

    fundToken(overrides?: CallOverrides): Promise<[string]>;

    hasValidRoute(
      _token: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isController(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isMultiRouter(
      _token: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    notifyCustomPool(
      _token: string,
      _rewardPool: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    notifyPsPool(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    psVault(overrides?: CallOverrides): Promise<[string]>;

    routers(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    routes(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setConversionPath(
      _route: string[],
      _routers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    targetToken(overrides?: CallOverrides): Promise<[string]>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  created(overrides?: CallOverrides): Promise<BigNumber>;

  distribute(
    _amount: BigNumberish,
    _token: string,
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fund(overrides?: CallOverrides): Promise<string>;

  fundToken(overrides?: CallOverrides): Promise<string>;

  hasValidRoute(
    _token: string,
    _targetToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initializeControllable(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isController(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  isGovernance(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  isMultiRouter(
    _token: string,
    _targetToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  notifyCustomPool(
    _token: string,
    _rewardPool: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  notifyPsPool(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  psVault(overrides?: CallOverrides): Promise<string>;

  routers(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  routes(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setConversionPath(
    _route: string[],
    _routers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  targetToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    created(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(
      _amount: BigNumberish,
      _token: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fund(overrides?: CallOverrides): Promise<string>;

    fundToken(overrides?: CallOverrides): Promise<string>;

    hasValidRoute(
      _token: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initializeControllable(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isController(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    isMultiRouter(
      _token: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    notifyCustomPool(
      _token: string,
      _rewardPool: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    notifyPsPool(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    psVault(overrides?: CallOverrides): Promise<string>;

    routers(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    routes(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setConversionPath(
      _route: string[],
      _routers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    targetToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    FeeMovedToFund(
      fund?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { fund: string; token: string; amount: BigNumber }
    >;

    FeeMovedToPs(
      ps?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { ps: string; token: string; amount: BigNumber }
    >;

    FeeMovedToVault(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { vault: string; token: string; amount: BigNumber }
    >;

    UpdateController(
      oldValue?: null,
      newValue?: null
    ): TypedEventFilter<
      [string, string],
      { oldValue: string; newValue: string }
    >;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    created(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(
      _amount: BigNumberish,
      _token: string,
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fund(overrides?: CallOverrides): Promise<BigNumber>;

    fundToken(overrides?: CallOverrides): Promise<BigNumber>;

    hasValidRoute(
      _token: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isController(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isMultiRouter(
      _token: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    notifyCustomPool(
      _token: string,
      _rewardPool: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    notifyPsPool(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    psVault(overrides?: CallOverrides): Promise<BigNumber>;

    routers(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routes(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setConversionPath(
      _route: string[],
      _routers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    targetToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    created(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distribute(
      _amount: BigNumberish,
      _token: string,
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasValidRoute(
      _token: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isController(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGovernance(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMultiRouter(
      _token: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    notifyCustomPool(
      _token: string,
      _rewardPool: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    notifyPsPool(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    psVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    routers(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routes(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setConversionPath(
      _route: string[],
      _routers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    targetToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
