/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IControllerInterface extends ethers.utils.Interface {
  functions: {
    "addStrategy(address)": FunctionFragment;
    "addToWhiteList(address)": FunctionFragment;
    "addToWhiteListMulti(address[])": FunctionFragment;
    "addVaultAndStrategy(address,address)": FunctionFragment;
    "announcer()": FunctionFragment;
    "bookkeeper()": FunctionFragment;
    "dao()": FunctionFragment;
    "feeRewardForwarder()": FunctionFragment;
    "fund()": FunctionFragment;
    "fundDenominator()": FunctionFragment;
    "fundNumerator()": FunctionFragment;
    "fundToken()": FunctionFragment;
    "governance()": FunctionFragment;
    "isAllowedUser(address)": FunctionFragment;
    "isDao(address)": FunctionFragment;
    "isHardWorker(address)": FunctionFragment;
    "isRewardDistributor(address)": FunctionFragment;
    "isValidStrategy(address)": FunctionFragment;
    "isValidVault(address)": FunctionFragment;
    "mintHelper()": FunctionFragment;
    "psDenominator()": FunctionFragment;
    "psNumerator()": FunctionFragment;
    "psVault()": FunctionFragment;
    "removeFromWhiteList(address)": FunctionFragment;
    "removeFromWhiteListMulti(address[])": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "setFundNumeratorDenominator(uint256,uint256)": FunctionFragment;
    "setPSNumeratorDenominator(uint256,uint256)": FunctionFragment;
    "strategies(address)": FunctionFragment;
    "vaultController()": FunctionFragment;
    "vaults(address)": FunctionFragment;
    "whiteList(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addStrategy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addToWhiteList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhiteListMulti",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addVaultAndStrategy",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "announcer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bookkeeper",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeRewardForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fundToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedUser",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isDao", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isHardWorker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRewardDistributor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidStrategy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintHelper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "psDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "psNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "psVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFromWhiteList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhiteListMulti",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFundNumeratorDenominator",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPSNumeratorDenominator",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "strategies", values: [string]): string;
  encodeFunctionData(
    functionFragment: "vaultController",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vaults", values: [string]): string;
  encodeFunctionData(functionFragment: "whiteList", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToWhiteListMulti",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addVaultAndStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "announcer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bookkeeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRewardForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isHardWorker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintHelper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "psDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "psNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "psVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhiteListMulti",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundNumeratorDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPSNumeratorDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whiteList", data: BytesLike): Result;

  events: {};
}

export class IController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IControllerInterface;

  functions: {
    addStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToWhiteList(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToWhiteListMulti(
      _targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addVaultAndStrategy(
      _vault: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    announcer(overrides?: CallOverrides): Promise<[string]>;

    bookkeeper(overrides?: CallOverrides): Promise<[string]>;

    dao(overrides?: CallOverrides): Promise<[string]>;

    feeRewardForwarder(overrides?: CallOverrides): Promise<[string]>;

    fund(overrides?: CallOverrides): Promise<[string]>;

    fundDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundToken(overrides?: CallOverrides): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    isAllowedUser(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isDao(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isHardWorker(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isRewardDistributor(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidStrategy(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidVault(_vault: string, overrides?: CallOverrides): Promise<[boolean]>;

    mintHelper(overrides?: CallOverrides): Promise<[string]>;

    psDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    psNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;

    psVault(overrides?: CallOverrides): Promise<[string]>;

    removeFromWhiteList(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeFromWhiteListMulti(
      _targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    setFundNumeratorDenominator(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPSNumeratorDenominator(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategies(_target: string, overrides?: CallOverrides): Promise<[boolean]>;

    vaultController(overrides?: CallOverrides): Promise<[string]>;

    vaults(_target: string, overrides?: CallOverrides): Promise<[boolean]>;

    whiteList(_target: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  addStrategy(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToWhiteList(
    _target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToWhiteListMulti(
    _targets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addVaultAndStrategy(
    _vault: string,
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  announcer(overrides?: CallOverrides): Promise<string>;

  bookkeeper(overrides?: CallOverrides): Promise<string>;

  dao(overrides?: CallOverrides): Promise<string>;

  feeRewardForwarder(overrides?: CallOverrides): Promise<string>;

  fund(overrides?: CallOverrides): Promise<string>;

  fundDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  fundNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  fundToken(overrides?: CallOverrides): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  isAllowedUser(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  isDao(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  isHardWorker(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  isRewardDistributor(
    _adr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidStrategy(
    _strategy: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidVault(_vault: string, overrides?: CallOverrides): Promise<boolean>;

  mintHelper(overrides?: CallOverrides): Promise<string>;

  psDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  psNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  psVault(overrides?: CallOverrides): Promise<string>;

  removeFromWhiteList(
    _target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeFromWhiteListMulti(
    _targets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  setFundNumeratorDenominator(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPSNumeratorDenominator(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategies(_target: string, overrides?: CallOverrides): Promise<boolean>;

  vaultController(overrides?: CallOverrides): Promise<string>;

  vaults(_target: string, overrides?: CallOverrides): Promise<boolean>;

  whiteList(_target: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addStrategy(_strategy: string, overrides?: CallOverrides): Promise<void>;

    addToWhiteList(_target: string, overrides?: CallOverrides): Promise<void>;

    addToWhiteListMulti(
      _targets: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addVaultAndStrategy(
      _vault: string,
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    announcer(overrides?: CallOverrides): Promise<string>;

    bookkeeper(overrides?: CallOverrides): Promise<string>;

    dao(overrides?: CallOverrides): Promise<string>;

    feeRewardForwarder(overrides?: CallOverrides): Promise<string>;

    fund(overrides?: CallOverrides): Promise<string>;

    fundDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    fundNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    fundToken(overrides?: CallOverrides): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    isAllowedUser(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    isDao(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    isHardWorker(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    isRewardDistributor(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidStrategy(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidVault(_vault: string, overrides?: CallOverrides): Promise<boolean>;

    mintHelper(overrides?: CallOverrides): Promise<string>;

    psDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    psNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    psVault(overrides?: CallOverrides): Promise<string>;

    removeFromWhiteList(
      _target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromWhiteListMulti(
      _targets: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    setFundNumeratorDenominator(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPSNumeratorDenominator(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    strategies(_target: string, overrides?: CallOverrides): Promise<boolean>;

    vaultController(overrides?: CallOverrides): Promise<string>;

    vaults(_target: string, overrides?: CallOverrides): Promise<boolean>;

    whiteList(_target: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    addStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToWhiteList(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToWhiteListMulti(
      _targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addVaultAndStrategy(
      _vault: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    announcer(overrides?: CallOverrides): Promise<BigNumber>;

    bookkeeper(overrides?: CallOverrides): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    feeRewardForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    fund(overrides?: CallOverrides): Promise<BigNumber>;

    fundDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    fundNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    fundToken(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    isAllowedUser(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isDao(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isHardWorker(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isRewardDistributor(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidStrategy(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidVault(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    mintHelper(overrides?: CallOverrides): Promise<BigNumber>;

    psDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    psNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    psVault(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromWhiteList(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeFromWhiteListMulti(
      _targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    setFundNumeratorDenominator(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPSNumeratorDenominator(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategies(_target: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaultController(overrides?: CallOverrides): Promise<BigNumber>;

    vaults(_target: string, overrides?: CallOverrides): Promise<BigNumber>;

    whiteList(_target: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToWhiteList(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToWhiteListMulti(
      _targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addVaultAndStrategy(
      _vault: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    announcer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bookkeeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRewardForwarder(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAllowedUser(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDao(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isHardWorker(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRewardDistributor(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidStrategy(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    psDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    psNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    psVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromWhiteList(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeFromWhiteListMulti(
      _targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFundNumeratorDenominator(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPSNumeratorDenominator(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategies(
      _target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaults(
      _target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whiteList(
      _target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
