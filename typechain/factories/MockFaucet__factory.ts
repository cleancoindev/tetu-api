/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockFaucet, MockFaucetInterface } from "../MockFaucet";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DELAY",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DENOMINATOR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PART_NUMERATOR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "addToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tokens",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "usersClaims",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610872806100326000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100e7578063918f8674146100fa578063d48bfca714610103578063dbb774d81461011657600080fd5b8063481a88f61461008d5780634e71d92d146100a85780634f64b2be146100b257806369b41170146100dd575b600080fd5b610095600a81565b6040519081526020015b60405180910390f35b6100b0610136565b005b6100c56100c0366004610706565b6102f6565b6040516001600160a01b03909116815260200161009f565b6100956201518081565b6000546100c5906001600160a01b031681565b61009561271081565b6100b06101113660046106bf565b610320565b6100956101243660046106bf565b60026020526000908152604090205481565b3360009081526002602052604090205480158061015e57506201518061015c82426107c4565b115b61019e5760405162461bcd60e51b815260206004820152600c60248201526b74727920746f6d6f72726f7760a01b60448201526064015b60405180910390fd5b3360009081526002602052604081204290555b6001548110156102f2576000600182815481106101de57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561022a57600080fd5b505afa15801561023e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610262919061071e565b905061271081101561027457506102e0565b600061028d61271061028784600a6103ff565b90610412565b90508061029b5750506102e0565b6102dd3382600186815481106102c157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316919061041e565b50505b806102ea8161080b565b9150506101b1565b5050565b6001818154811061030657600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146103665760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b6044820152606401610195565b6001600160a01b0381166103ae5760405162461bcd60e51b815260206004820152600f60248201526e61646472657373206973207a65726f60881b6044820152606401610195565b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0392909216919091179055565b600061040b82846107a5565b9392505050565b600061040b8284610785565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610470908490610475565b505050565b60006104ca826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166105479092919063ffffffff16565b80519091501561047057808060200190518101906104e891906106e6565b6104705760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610195565b6060610556848460008561055e565b949350505050565b6060824710156105bf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610195565b843b61060d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610195565b600080866001600160a01b031685876040516106299190610736565b60006040518083038185875af1925050503d8060008114610666576040519150601f19603f3d011682016040523d82523d6000602084013e61066b565b606091505b509150915061067b828286610686565b979650505050505050565b6060831561069557508161040b565b8251156106a55782518084602001fd5b8160405162461bcd60e51b81526004016101959190610752565b6000602082840312156106d0578081fd5b81356001600160a01b038116811461040b578182fd5b6000602082840312156106f7578081fd5b8151801515811461040b578182fd5b600060208284031215610717578081fd5b5035919050565b60006020828403121561072f578081fd5b5051919050565b600082516107488184602087016107db565b9190910192915050565b60208152600082518060208401526107718160408501602087016107db565b601f01601f19169190910160400192915050565b6000826107a057634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156107bf576107bf610826565b500290565b6000828210156107d6576107d6610826565b500390565b60005b838110156107f65781810151838201526020016107de565b83811115610805576000848401525b50505050565b600060001982141561081f5761081f610826565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220ec0c8f94c3f97b195299505d562201502c601df2184b5c500bc43a37563532f364736f6c63430008040033";

export class MockFaucet__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockFaucet> {
    return super.deploy(overrides || {}) as Promise<MockFaucet>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockFaucet {
    return super.attach(address) as MockFaucet;
  }
  connect(signer: Signer): MockFaucet__factory {
    return super.connect(signer) as MockFaucet__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockFaucetInterface {
    return new utils.Interface(_abi) as MockFaucetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockFaucet {
    return new Contract(address, _abi, signerOrProvider) as MockFaucet;
  }
}
