/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ContractUtils, ContractUtilsInterface } from "../ContractUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "adr",
        type: "address",
      },
    ],
    name: "erc20Balances",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "_addresses",
        type: "address[]",
      },
    ],
    name: "erc20BalancesForAddresses",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "erc20Decimals",
    outputs: [
      {
        internalType: "uint8[]",
        name: "",
        type: "uint8[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "erc20Names",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "erc20Symbols",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "erc20TotalSupply",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ccf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063317ca59a14610067578063591b6ddb146100905780635d41fde0146100a357806374d8744e146100c3578063ca8b0e65146100e3578063d6f5c79a146100f6575b600080fd5b61007a6100753660046109e7565b610109565b6040516100879190610b7c565b60405180910390f35b61007a61009e366004610960565b610257565b6100b66100b13660046109ac565b6103aa565b6040516100879190610bc0565b6100d66100d13660046109ac565b6104f1565b6040516100879190610b03565b61007a6100f13660046109ac565b610639565b6100d66101043660046109ac565b610772565b60606000835167ffffffffffffffff81111561013557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561015e578160200160208202803683370190505b50905060005b845181101561024f5784818151811061018d57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516370a0823160e01b81526001600160a01b038681166004830152909116906370a082319060240160206040518083038186803b1580156101da57600080fd5b505afa1580156101ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102129190610ac3565b82828151811061023257634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061024781610c5c565b915050610164565b509392505050565b60606000825167ffffffffffffffff81111561028357634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156102ac578160200160208202803683370190505b50905060005b835181101561024f57846001600160a01b03166370a082318583815181106102ea57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161031d91906001600160a01b0391909116815260200190565b60206040518083038186803b15801561033557600080fd5b505afa158015610349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036d9190610ac3565b82828151811061038d57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806103a281610c5c565b9150506102b2565b60606000825167ffffffffffffffff8111156103d657634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156103ff578160200160208202803683370190505b50905060005b83518110156104ea5783818151811061042e57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561046e57600080fd5b505afa158015610482573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a69190610adb565b8282815181106104c657634e487b7160e01b600052603260045260246000fd5b60ff90921660209283029190910190910152806104e281610c5c565b915050610405565b5092915050565b60606000825167ffffffffffffffff81111561051d57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561055057816020015b606081526020019060019003908161053b5790505b50905060005b83518110156104ea5783818151811061057f57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156105bf57600080fd5b505afa1580156105d3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105fb9190810190610a33565b82828151811061061b57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061063190610c5c565b915050610556565b60606000825167ffffffffffffffff81111561066557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561068e578160200160208202803683370190505b50905060005b83518110156104ea578381815181106106bd57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106fd57600080fd5b505afa158015610711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107359190610ac3565b82828151811061075557634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061076a81610c5c565b915050610694565b60606000825167ffffffffffffffff81111561079e57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156107d157816020015b60608152602001906001900390816107bc5790505b50905060005b83518110156104ea5783818151811061080057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561084057600080fd5b505afa158015610854573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261087c9190810190610a33565b82828151811061089c57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806108b290610c5c565b9150506107d7565b80356001600160a01b03811681146108d157600080fd5b919050565b600082601f8301126108e6578081fd5b8135602067ffffffffffffffff82111561090257610902610c83565b8160051b610911828201610bfb565b83815282810190868401838801850189101561092b578687fd5b8693505b8584101561095457610940816108ba565b83526001939093019291840191840161092f565b50979650505050505050565b60008060408385031215610972578182fd5b61097b836108ba565b9150602083013567ffffffffffffffff811115610996578182fd5b6109a2858286016108d6565b9150509250929050565b6000602082840312156109bd578081fd5b813567ffffffffffffffff8111156109d3578182fd5b6109df848285016108d6565b949350505050565b600080604083850312156109f9578182fd5b823567ffffffffffffffff811115610a0f578283fd5b610a1b858286016108d6565b925050610a2a602084016108ba565b90509250929050565b600060208284031215610a44578081fd5b815167ffffffffffffffff80821115610a5b578283fd5b818401915084601f830112610a6e578283fd5b815181811115610a8057610a80610c83565b610a93601f8201601f1916602001610bfb565b9150808252856020828501011115610aa9578384fd5b610aba816020840160208601610c2c565b50949350505050565b600060208284031215610ad4578081fd5b5051919050565b600060208284031215610aec578081fd5b815160ff81168114610afc578182fd5b9392505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b82811015610b6f57878503603f1901845281518051808752610b50818989018a8501610c2c565b601f01601f191695909501860194509285019290850190600101610b29565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610bb457835183529284019291840191600101610b98565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610bb457835160ff1683529284019291840191600101610bdc565b604051601f8201601f1916810167ffffffffffffffff81118282101715610c2457610c24610c83565b604052919050565b60005b83811015610c47578181015183820152602001610c2f565b83811115610c56576000848401525b50505050565b6000600019821415610c7c57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea26469706673582212206d8405004d4833541587697cb30fc33515c4ad0e751a1552717fc66c57c23a6264736f6c63430008040033";

export class ContractUtils__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractUtils> {
    return super.deploy(overrides || {}) as Promise<ContractUtils>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ContractUtils {
    return super.attach(address) as ContractUtils;
  }
  connect(signer: Signer): ContractUtils__factory {
    return super.connect(signer) as ContractUtils__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ContractUtilsInterface {
    return new utils.Interface(_abi) as ContractUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ContractUtils {
    return new Contract(address, _abi, signerOrProvider) as ContractUtils;
  }
}
