/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  EvilHackerContract,
  EvilHackerContractInterface,
} from "../EvilHackerContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "tryDeposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610104806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063056b008914602d575b600080fd5b603c6038366004609a565b603e565b005b60405163b6b55f2560e01b8152600481018290526001600160a01b0383169063b6b55f2590602401600060405180830381600087803b158015607f57600080fd5b505af11580156092573d6000803e3d6000fd5b505050505050565b6000806040838503121560ab578182fd5b82356001600160a01b038116811460c0578283fd5b94602093909301359350505056fea2646970667358221220bfa440f804097d4f73593194aa41c59b363b6fbc3627f67e2e45f715ca5b63ed64736f6c63430008040033";

export class EvilHackerContract__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<EvilHackerContract> {
    return super.deploy(overrides || {}) as Promise<EvilHackerContract>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): EvilHackerContract {
    return super.attach(address) as EvilHackerContract;
  }
  connect(signer: Signer): EvilHackerContract__factory {
    return super.connect(signer) as EvilHackerContract__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EvilHackerContractInterface {
    return new utils.Interface(_abi) as EvilHackerContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EvilHackerContract {
    return new Contract(address, _abi, signerOrProvider) as EvilHackerContract;
  }
}
