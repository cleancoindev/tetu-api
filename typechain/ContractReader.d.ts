/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ContractReaderInterface extends ethers.utils.Interface {
  functions: {
    "PRECISION()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "bookkeeper()": FunctionFragment;
    "computeApr(uint256,uint256,uint256)": FunctionFragment;
    "computeRewardApr(address,address)": FunctionFragment;
    "controller()": FunctionFragment;
    "created()": FunctionFragment;
    "getPrice(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "initializeControllable(address)": FunctionFragment;
    "isController(address)": FunctionFragment;
    "isGovernance(address)": FunctionFragment;
    "priceCalculator()": FunctionFragment;
    "setPriceCalculator(address)": FunctionFragment;
    "strategies()": FunctionFragment;
    "strategiesLength()": FunctionFragment;
    "strategyAssets(address)": FunctionFragment;
    "strategyCreated(address)": FunctionFragment;
    "strategyEarned(address)": FunctionFragment;
    "strategyPausedInvesting(address)": FunctionFragment;
    "strategyPlatform(address)": FunctionFragment;
    "strategyRewardTokens(address)": FunctionFragment;
    "tetuTokenValues()": FunctionFragment;
    "totalTetuBoughBack(address[])": FunctionFragment;
    "totalTvlUsdc(address[])": FunctionFragment;
    "totalUsers(address[])": FunctionFragment;
    "totalUsersForAllVaults()": FunctionFragment;
    "userDepositedShare(address,address)": FunctionFragment;
    "userDepositedUnderlying(address,address)": FunctionFragment;
    "userDepositedUnderlyingUsdc(address,address)": FunctionFragment;
    "userInfo(address,address)": FunctionFragment;
    "userInfoLight(address,address)": FunctionFragment;
    "userInfosLight(address,address[])": FunctionFragment;
    "userRewards(address,address)": FunctionFragment;
    "userRewardsBoost(address,address)": FunctionFragment;
    "userRewardsBoostUsdc(address,address)": FunctionFragment;
    "userRewardsUsdc(address,address)": FunctionFragment;
    "userUnderlyingBalance(address,address)": FunctionFragment;
    "userUnderlyingBalanceUsdc(address,address)": FunctionFragment;
    "vaultActive(address)": FunctionFragment;
    "vaultCreated(address)": FunctionFragment;
    "vaultDecimals(address)": FunctionFragment;
    "vaultDuration(address)": FunctionFragment;
    "vaultInfo(address)": FunctionFragment;
    "vaultInfoLight(address)": FunctionFragment;
    "vaultInfos(address[])": FunctionFragment;
    "vaultInfosLight(address[])": FunctionFragment;
    "vaultName(address)": FunctionFragment;
    "vaultPpfsApr(address)": FunctionFragment;
    "vaultPpfsLastApr(address)": FunctionFragment;
    "vaultRewardTokens(address)": FunctionFragment;
    "vaultRewardTokensBal(address)": FunctionFragment;
    "vaultRewardTokensBalUsdc(address)": FunctionFragment;
    "vaultRewardsApr(address)": FunctionFragment;
    "vaultTvl(address)": FunctionFragment;
    "vaultTvlUsdc(address)": FunctionFragment;
    "vaultUnderlying(address)": FunctionFragment;
    "vaultUsers(address)": FunctionFragment;
    "vaultWithUserInfoPages(address,uint256,uint256)": FunctionFragment;
    "vaultWithUserInfoPagesLight(address,uint256,uint256)": FunctionFragment;
    "vaultWithUserInfos(address,address[])": FunctionFragment;
    "vaultWithUserInfosLight(address,address[])": FunctionFragment;
    "vaults()": FunctionFragment;
    "vaultsLength()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bookkeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeApr",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeRewardApr",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "created", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPrice", values: [string]): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initializeControllable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "priceCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceCalculator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "strategies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strategiesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strategyAssets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyCreated",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyEarned",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyPausedInvesting",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyPlatform",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyRewardTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tetuTokenValues",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTetuBoughBack",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalTvlUsdc",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalUsers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalUsersForAllVaults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userDepositedShare",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userDepositedUnderlying",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userDepositedUnderlyingUsdc",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfoLight",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfosLight",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardsBoost",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardsBoostUsdc",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardsUsdc",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userUnderlyingBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userUnderlyingBalanceUsdc",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "vaultActive", values: [string]): string;
  encodeFunctionData(
    functionFragment: "vaultCreated",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultDecimals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultDuration",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vaultInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "vaultInfoLight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultInfos",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultInfosLight",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "vaultName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "vaultPpfsApr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultPpfsLastApr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultRewardTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultRewardTokensBal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultRewardTokensBalUsdc",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultRewardsApr",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vaultTvl", values: [string]): string;
  encodeFunctionData(
    functionFragment: "vaultTvlUsdc",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vaultUsers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "vaultWithUserInfoPages",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultWithUserInfoPagesLight",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultWithUserInfos",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultWithUserInfosLight",
    values: [string, string[]]
  ): string;
  encodeFunctionData(functionFragment: "vaults", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vaultsLength",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bookkeeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "computeApr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeRewardApr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "created", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeControllable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strategiesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyPausedInvesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tetuTokenValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTetuBoughBack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTvlUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalUsers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalUsersForAllVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDepositedShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDepositedUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDepositedUnderlyingUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userInfoLight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userInfosLight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardsBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardsBoostUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardsUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userUnderlyingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userUnderlyingBalanceUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultInfoLight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultInfos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultInfosLight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultPpfsApr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultPpfsLastApr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultRewardTokensBal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultRewardTokensBalUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultRewardsApr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultTvl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultTvlUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultUsers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultWithUserInfoPages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultWithUserInfoPagesLight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultWithUserInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultWithUserInfosLight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultsLength",
    data: BytesLike
  ): Result;

  events: {
    "ToolAddressUpdated(address)": EventFragment;
    "UpdateController(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ToolAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateController"): EventFragment;
}

export class ContractReader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ContractReaderInterface;

  functions: {
    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    bookkeeper(overrides?: CallOverrides): Promise<[string]>;

    computeApr(
      tvl: BigNumberish,
      rewards: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeRewardApr(
      _vault: string,
      rt: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string] & { adr: string }>;

    created(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ts: BigNumber }>;

    getPrice(_token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isController(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    priceCalculator(overrides?: CallOverrides): Promise<[string]>;

    setPriceCalculator(
      newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategies(overrides?: CallOverrides): Promise<[string[]]>;

    strategiesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    strategyAssets(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    strategyCreated(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    strategyEarned(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    strategyPausedInvesting(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    strategyPlatform(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    strategyRewardTokens(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    tetuTokenValues(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    totalTetuBoughBack(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalTvlUsdc(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalUsers(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalUsersForAllVaults(overrides?: CallOverrides): Promise<[BigNumber]>;

    userDepositedShare(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userDepositedUnderlying(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userDepositedUnderlyingUsdc(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userInfo(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string[],
          BigNumber[],
          BigNumber[],
          BigNumber[],
          BigNumber[]
        ] & {
          wallet: string;
          vault: string;
          underlyingBalance: BigNumber;
          underlyingBalanceUsdc: BigNumber;
          depositedUnderlying: BigNumber;
          depositedUnderlyingUsdc: BigNumber;
          depositedShare: BigNumber;
          rewardTokens: string[];
          rewards: BigNumber[];
          rewardsUsdc: BigNumber[];
          rewardsBoost: BigNumber[];
          rewardsBoostUsdc: BigNumber[];
        }
      ]
    >;

    userInfoLight(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          depositedUnderlying: BigNumber;
          depositedUnderlyingUsdc: BigNumber;
          depositedShare: BigNumber;
        }
      ]
    >;

    userInfosLight(
      _user: string,
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber] & {
          depositedUnderlying: BigNumber;
          depositedUnderlyingUsdc: BigNumber;
          depositedShare: BigNumber;
        })[]
      ]
    >;

    userRewards(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    userRewardsBoost(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    userRewardsBoostUsdc(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    userRewardsUsdc(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    userUnderlyingBalance(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userUnderlyingBalanceUsdc(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultActive(_vault: string, overrides?: CallOverrides): Promise<[boolean]>;

    vaultCreated(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultDecimals(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultDuration(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultInfo(
      vault: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string[],
          BigNumber[],
          BigNumber[],
          BigNumber,
          BigNumber[],
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          number,
          string[],
          string[],
          boolean,
          BigNumber
        ] & {
          addr: string;
          name: string;
          created: BigNumber;
          active: boolean;
          tvl: BigNumber;
          tvlUsdc: BigNumber;
          decimals: BigNumber;
          underlying: string;
          rewardTokens: string[];
          rewardTokensBal: BigNumber[];
          rewardTokensBalUsdc: BigNumber[];
          duration: BigNumber;
          rewardsApr: BigNumber[];
          ppfsApr: BigNumber;
          users: BigNumber;
          strategy: string;
          strategyCreated: BigNumber;
          platform: number;
          assets: string[];
          strategyRewards: string[];
          strategyOnPause: boolean;
          earned: BigNumber;
        }
      ]
    >;

    vaultInfoLight(
      vault: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string[],
          BigNumber[],
          BigNumber,
          number,
          string[],
          BigNumber
        ] & {
          addr: string;
          created: BigNumber;
          active: boolean;
          tvl: BigNumber;
          tvlUsdc: BigNumber;
          underlying: string;
          rewardTokens: string[];
          rewardsApr: BigNumber[];
          ppfsApr: BigNumber;
          platform: number;
          assets: string[];
          earned: BigNumber;
        }
      ]
    >;

    vaultInfos(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string[],
          BigNumber[],
          BigNumber[],
          BigNumber,
          BigNumber[],
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          number,
          string[],
          string[],
          boolean,
          BigNumber
        ] & {
          addr: string;
          name: string;
          created: BigNumber;
          active: boolean;
          tvl: BigNumber;
          tvlUsdc: BigNumber;
          decimals: BigNumber;
          underlying: string;
          rewardTokens: string[];
          rewardTokensBal: BigNumber[];
          rewardTokensBalUsdc: BigNumber[];
          duration: BigNumber;
          rewardsApr: BigNumber[];
          ppfsApr: BigNumber;
          users: BigNumber;
          strategy: string;
          strategyCreated: BigNumber;
          platform: number;
          assets: string[];
          strategyRewards: string[];
          strategyOnPause: boolean;
          earned: BigNumber;
        })[]
      ]
    >;

    vaultInfosLight(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string[],
          BigNumber[],
          BigNumber,
          number,
          string[],
          BigNumber
        ] & {
          addr: string;
          created: BigNumber;
          active: boolean;
          tvl: BigNumber;
          tvlUsdc: BigNumber;
          underlying: string;
          rewardTokens: string[];
          rewardsApr: BigNumber[];
          ppfsApr: BigNumber;
          platform: number;
          assets: string[];
          earned: BigNumber;
        })[]
      ]
    >;

    vaultName(_vault: string, overrides?: CallOverrides): Promise<[string]>;

    vaultPpfsApr(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultPpfsLastApr(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultRewardTokens(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    vaultRewardTokensBal(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    vaultRewardTokensBalUsdc(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    vaultRewardsApr(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    vaultTvl(_vault: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultTvlUsdc(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultUnderlying(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    vaultUsers(_vault: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultWithUserInfoPages(
      _user: string,
      page: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [
            string,
            string,
            BigNumber,
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            string[],
            BigNumber[],
            BigNumber[],
            BigNumber,
            BigNumber[],
            BigNumber,
            BigNumber,
            string,
            BigNumber,
            number,
            string[],
            string[],
            boolean,
            BigNumber
          ] & {
            addr: string;
            name: string;
            created: BigNumber;
            active: boolean;
            tvl: BigNumber;
            tvlUsdc: BigNumber;
            decimals: BigNumber;
            underlying: string;
            rewardTokens: string[];
            rewardTokensBal: BigNumber[];
            rewardTokensBalUsdc: BigNumber[];
            duration: BigNumber;
            rewardsApr: BigNumber[];
            ppfsApr: BigNumber;
            users: BigNumber;
            strategy: string;
            strategyCreated: BigNumber;
            platform: number;
            assets: string[];
            strategyRewards: string[];
            strategyOnPause: boolean;
            earned: BigNumber;
          },
          [
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string[],
            BigNumber[],
            BigNumber[],
            BigNumber[],
            BigNumber[]
          ] & {
            wallet: string;
            vault: string;
            underlyingBalance: BigNumber;
            underlyingBalanceUsdc: BigNumber;
            depositedUnderlying: BigNumber;
            depositedUnderlyingUsdc: BigNumber;
            depositedShare: BigNumber;
            rewardTokens: string[];
            rewards: BigNumber[];
            rewardsUsdc: BigNumber[];
            rewardsBoost: BigNumber[];
            rewardsBoostUsdc: BigNumber[];
          }
        ] & {
          vault: [
            string,
            string,
            BigNumber,
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            string[],
            BigNumber[],
            BigNumber[],
            BigNumber,
            BigNumber[],
            BigNumber,
            BigNumber,
            string,
            BigNumber,
            number,
            string[],
            string[],
            boolean,
            BigNumber
          ] & {
            addr: string;
            name: string;
            created: BigNumber;
            active: boolean;
            tvl: BigNumber;
            tvlUsdc: BigNumber;
            decimals: BigNumber;
            underlying: string;
            rewardTokens: string[];
            rewardTokensBal: BigNumber[];
            rewardTokensBalUsdc: BigNumber[];
            duration: BigNumber;
            rewardsApr: BigNumber[];
            ppfsApr: BigNumber;
            users: BigNumber;
            strategy: string;
            strategyCreated: BigNumber;
            platform: number;
            assets: string[];
            strategyRewards: string[];
            strategyOnPause: boolean;
            earned: BigNumber;
          };
          user: [
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string[],
            BigNumber[],
            BigNumber[],
            BigNumber[],
            BigNumber[]
          ] & {
            wallet: string;
            vault: string;
            underlyingBalance: BigNumber;
            underlyingBalanceUsdc: BigNumber;
            depositedUnderlying: BigNumber;
            depositedUnderlyingUsdc: BigNumber;
            depositedShare: BigNumber;
            rewardTokens: string[];
            rewards: BigNumber[];
            rewardsUsdc: BigNumber[];
            rewardsBoost: BigNumber[];
            rewardsBoostUsdc: BigNumber[];
          };
        })[]
      ]
    >;

    vaultWithUserInfoPagesLight(
      _user: string,
      page: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [
            string,
            BigNumber,
            boolean,
            BigNumber,
            BigNumber,
            string,
            string[],
            BigNumber[],
            BigNumber,
            number,
            string[],
            BigNumber
          ] & {
            addr: string;
            created: BigNumber;
            active: boolean;
            tvl: BigNumber;
            tvlUsdc: BigNumber;
            underlying: string;
            rewardTokens: string[];
            rewardsApr: BigNumber[];
            ppfsApr: BigNumber;
            platform: number;
            assets: string[];
            earned: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber] & {
            depositedUnderlying: BigNumber;
            depositedUnderlyingUsdc: BigNumber;
            depositedShare: BigNumber;
          }
        ] & {
          vault: [
            string,
            BigNumber,
            boolean,
            BigNumber,
            BigNumber,
            string,
            string[],
            BigNumber[],
            BigNumber,
            number,
            string[],
            BigNumber
          ] & {
            addr: string;
            created: BigNumber;
            active: boolean;
            tvl: BigNumber;
            tvlUsdc: BigNumber;
            underlying: string;
            rewardTokens: string[];
            rewardsApr: BigNumber[];
            ppfsApr: BigNumber;
            platform: number;
            assets: string[];
            earned: BigNumber;
          };
          user: [BigNumber, BigNumber, BigNumber] & {
            depositedUnderlying: BigNumber;
            depositedUnderlyingUsdc: BigNumber;
            depositedShare: BigNumber;
          };
        })[]
      ]
    >;

    vaultWithUserInfos(
      _user: string,
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [
            string,
            string,
            BigNumber,
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            string[],
            BigNumber[],
            BigNumber[],
            BigNumber,
            BigNumber[],
            BigNumber,
            BigNumber,
            string,
            BigNumber,
            number,
            string[],
            string[],
            boolean,
            BigNumber
          ] & {
            addr: string;
            name: string;
            created: BigNumber;
            active: boolean;
            tvl: BigNumber;
            tvlUsdc: BigNumber;
            decimals: BigNumber;
            underlying: string;
            rewardTokens: string[];
            rewardTokensBal: BigNumber[];
            rewardTokensBalUsdc: BigNumber[];
            duration: BigNumber;
            rewardsApr: BigNumber[];
            ppfsApr: BigNumber;
            users: BigNumber;
            strategy: string;
            strategyCreated: BigNumber;
            platform: number;
            assets: string[];
            strategyRewards: string[];
            strategyOnPause: boolean;
            earned: BigNumber;
          },
          [
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string[],
            BigNumber[],
            BigNumber[],
            BigNumber[],
            BigNumber[]
          ] & {
            wallet: string;
            vault: string;
            underlyingBalance: BigNumber;
            underlyingBalanceUsdc: BigNumber;
            depositedUnderlying: BigNumber;
            depositedUnderlyingUsdc: BigNumber;
            depositedShare: BigNumber;
            rewardTokens: string[];
            rewards: BigNumber[];
            rewardsUsdc: BigNumber[];
            rewardsBoost: BigNumber[];
            rewardsBoostUsdc: BigNumber[];
          }
        ] & {
          vault: [
            string,
            string,
            BigNumber,
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            string[],
            BigNumber[],
            BigNumber[],
            BigNumber,
            BigNumber[],
            BigNumber,
            BigNumber,
            string,
            BigNumber,
            number,
            string[],
            string[],
            boolean,
            BigNumber
          ] & {
            addr: string;
            name: string;
            created: BigNumber;
            active: boolean;
            tvl: BigNumber;
            tvlUsdc: BigNumber;
            decimals: BigNumber;
            underlying: string;
            rewardTokens: string[];
            rewardTokensBal: BigNumber[];
            rewardTokensBalUsdc: BigNumber[];
            duration: BigNumber;
            rewardsApr: BigNumber[];
            ppfsApr: BigNumber;
            users: BigNumber;
            strategy: string;
            strategyCreated: BigNumber;
            platform: number;
            assets: string[];
            strategyRewards: string[];
            strategyOnPause: boolean;
            earned: BigNumber;
          };
          user: [
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string[],
            BigNumber[],
            BigNumber[],
            BigNumber[],
            BigNumber[]
          ] & {
            wallet: string;
            vault: string;
            underlyingBalance: BigNumber;
            underlyingBalanceUsdc: BigNumber;
            depositedUnderlying: BigNumber;
            depositedUnderlyingUsdc: BigNumber;
            depositedShare: BigNumber;
            rewardTokens: string[];
            rewards: BigNumber[];
            rewardsUsdc: BigNumber[];
            rewardsBoost: BigNumber[];
            rewardsBoostUsdc: BigNumber[];
          };
        })[]
      ]
    >;

    vaultWithUserInfosLight(
      _user: string,
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [
            string,
            BigNumber,
            boolean,
            BigNumber,
            BigNumber,
            string,
            string[],
            BigNumber[],
            BigNumber,
            number,
            string[],
            BigNumber
          ] & {
            addr: string;
            created: BigNumber;
            active: boolean;
            tvl: BigNumber;
            tvlUsdc: BigNumber;
            underlying: string;
            rewardTokens: string[];
            rewardsApr: BigNumber[];
            ppfsApr: BigNumber;
            platform: number;
            assets: string[];
            earned: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber] & {
            depositedUnderlying: BigNumber;
            depositedUnderlyingUsdc: BigNumber;
            depositedShare: BigNumber;
          }
        ] & {
          vault: [
            string,
            BigNumber,
            boolean,
            BigNumber,
            BigNumber,
            string,
            string[],
            BigNumber[],
            BigNumber,
            number,
            string[],
            BigNumber
          ] & {
            addr: string;
            created: BigNumber;
            active: boolean;
            tvl: BigNumber;
            tvlUsdc: BigNumber;
            underlying: string;
            rewardTokens: string[];
            rewardsApr: BigNumber[];
            ppfsApr: BigNumber;
            platform: number;
            assets: string[];
            earned: BigNumber;
          };
          user: [BigNumber, BigNumber, BigNumber] & {
            depositedUnderlying: BigNumber;
            depositedUnderlyingUsdc: BigNumber;
            depositedShare: BigNumber;
          };
        })[]
      ]
    >;

    vaults(overrides?: CallOverrides): Promise<[string[]]>;

    vaultsLength(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  bookkeeper(overrides?: CallOverrides): Promise<string>;

  computeApr(
    tvl: BigNumberish,
    rewards: BigNumberish,
    duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeRewardApr(
    _vault: string,
    rt: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  controller(overrides?: CallOverrides): Promise<string>;

  created(overrides?: CallOverrides): Promise<BigNumber>;

  getPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeControllable(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isController(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  isGovernance(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  priceCalculator(overrides?: CallOverrides): Promise<string>;

  setPriceCalculator(
    newValue: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategies(overrides?: CallOverrides): Promise<string[]>;

  strategiesLength(overrides?: CallOverrides): Promise<BigNumber>;

  strategyAssets(
    _strategy: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  strategyCreated(
    _strategy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  strategyEarned(
    _strategy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  strategyPausedInvesting(
    _strategy: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  strategyPlatform(
    _strategy: string,
    overrides?: CallOverrides
  ): Promise<number>;

  strategyRewardTokens(
    _strategy: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  tetuTokenValues(overrides?: CallOverrides): Promise<BigNumber[]>;

  totalTetuBoughBack(
    _vaults: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalTvlUsdc(
    _vaults: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalUsers(_vaults: string[], overrides?: CallOverrides): Promise<BigNumber>;

  totalUsersForAllVaults(overrides?: CallOverrides): Promise<BigNumber>;

  userDepositedShare(
    _user: string,
    _vault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userDepositedUnderlying(
    _user: string,
    _vault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userDepositedUnderlyingUsdc(
    _user: string,
    _vault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userInfo(
    _user: string,
    _vault: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string[],
      BigNumber[],
      BigNumber[],
      BigNumber[],
      BigNumber[]
    ] & {
      wallet: string;
      vault: string;
      underlyingBalance: BigNumber;
      underlyingBalanceUsdc: BigNumber;
      depositedUnderlying: BigNumber;
      depositedUnderlyingUsdc: BigNumber;
      depositedShare: BigNumber;
      rewardTokens: string[];
      rewards: BigNumber[];
      rewardsUsdc: BigNumber[];
      rewardsBoost: BigNumber[];
      rewardsBoostUsdc: BigNumber[];
    }
  >;

  userInfoLight(
    _user: string,
    _vault: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      depositedUnderlying: BigNumber;
      depositedUnderlyingUsdc: BigNumber;
      depositedShare: BigNumber;
    }
  >;

  userInfosLight(
    _user: string,
    _vaults: string[],
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber] & {
      depositedUnderlying: BigNumber;
      depositedUnderlyingUsdc: BigNumber;
      depositedShare: BigNumber;
    })[]
  >;

  userRewards(
    _user: string,
    _vault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  userRewardsBoost(
    _user: string,
    _vault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  userRewardsBoostUsdc(
    _user: string,
    _vault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  userRewardsUsdc(
    _user: string,
    _vault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  userUnderlyingBalance(
    _user: string,
    _vault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userUnderlyingBalanceUsdc(
    _user: string,
    _vault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaultActive(_vault: string, overrides?: CallOverrides): Promise<boolean>;

  vaultCreated(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

  vaultDecimals(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

  vaultDuration(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

  vaultInfo(
    vault: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string[],
      BigNumber[],
      BigNumber[],
      BigNumber,
      BigNumber[],
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      number,
      string[],
      string[],
      boolean,
      BigNumber
    ] & {
      addr: string;
      name: string;
      created: BigNumber;
      active: boolean;
      tvl: BigNumber;
      tvlUsdc: BigNumber;
      decimals: BigNumber;
      underlying: string;
      rewardTokens: string[];
      rewardTokensBal: BigNumber[];
      rewardTokensBalUsdc: BigNumber[];
      duration: BigNumber;
      rewardsApr: BigNumber[];
      ppfsApr: BigNumber;
      users: BigNumber;
      strategy: string;
      strategyCreated: BigNumber;
      platform: number;
      assets: string[];
      strategyRewards: string[];
      strategyOnPause: boolean;
      earned: BigNumber;
    }
  >;

  vaultInfoLight(
    vault: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      string,
      string[],
      BigNumber[],
      BigNumber,
      number,
      string[],
      BigNumber
    ] & {
      addr: string;
      created: BigNumber;
      active: boolean;
      tvl: BigNumber;
      tvlUsdc: BigNumber;
      underlying: string;
      rewardTokens: string[];
      rewardsApr: BigNumber[];
      ppfsApr: BigNumber;
      platform: number;
      assets: string[];
      earned: BigNumber;
    }
  >;

  vaultInfos(
    _vaults: string[],
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string[],
      BigNumber[],
      BigNumber[],
      BigNumber,
      BigNumber[],
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      number,
      string[],
      string[],
      boolean,
      BigNumber
    ] & {
      addr: string;
      name: string;
      created: BigNumber;
      active: boolean;
      tvl: BigNumber;
      tvlUsdc: BigNumber;
      decimals: BigNumber;
      underlying: string;
      rewardTokens: string[];
      rewardTokensBal: BigNumber[];
      rewardTokensBalUsdc: BigNumber[];
      duration: BigNumber;
      rewardsApr: BigNumber[];
      ppfsApr: BigNumber;
      users: BigNumber;
      strategy: string;
      strategyCreated: BigNumber;
      platform: number;
      assets: string[];
      strategyRewards: string[];
      strategyOnPause: boolean;
      earned: BigNumber;
    })[]
  >;

  vaultInfosLight(
    _vaults: string[],
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      string,
      string[],
      BigNumber[],
      BigNumber,
      number,
      string[],
      BigNumber
    ] & {
      addr: string;
      created: BigNumber;
      active: boolean;
      tvl: BigNumber;
      tvlUsdc: BigNumber;
      underlying: string;
      rewardTokens: string[];
      rewardsApr: BigNumber[];
      ppfsApr: BigNumber;
      platform: number;
      assets: string[];
      earned: BigNumber;
    })[]
  >;

  vaultName(_vault: string, overrides?: CallOverrides): Promise<string>;

  vaultPpfsApr(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

  vaultPpfsLastApr(
    _vault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaultRewardTokens(
    _vault: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  vaultRewardTokensBal(
    _vault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  vaultRewardTokensBalUsdc(
    _vault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  vaultRewardsApr(
    _vault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  vaultTvl(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

  vaultTvlUsdc(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

  vaultUnderlying(_vault: string, overrides?: CallOverrides): Promise<string>;

  vaultUsers(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

  vaultWithUserInfoPages(
    _user: string,
    page: BigNumberish,
    pageSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      [
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber,
        BigNumber[],
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        number,
        string[],
        string[],
        boolean,
        BigNumber
      ] & {
        addr: string;
        name: string;
        created: BigNumber;
        active: boolean;
        tvl: BigNumber;
        tvlUsdc: BigNumber;
        decimals: BigNumber;
        underlying: string;
        rewardTokens: string[];
        rewardTokensBal: BigNumber[];
        rewardTokensBalUsdc: BigNumber[];
        duration: BigNumber;
        rewardsApr: BigNumber[];
        ppfsApr: BigNumber;
        users: BigNumber;
        strategy: string;
        strategyCreated: BigNumber;
        platform: number;
        assets: string[];
        strategyRewards: string[];
        strategyOnPause: boolean;
        earned: BigNumber;
      },
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[]
      ] & {
        wallet: string;
        vault: string;
        underlyingBalance: BigNumber;
        underlyingBalanceUsdc: BigNumber;
        depositedUnderlying: BigNumber;
        depositedUnderlyingUsdc: BigNumber;
        depositedShare: BigNumber;
        rewardTokens: string[];
        rewards: BigNumber[];
        rewardsUsdc: BigNumber[];
        rewardsBoost: BigNumber[];
        rewardsBoostUsdc: BigNumber[];
      }
    ] & {
      vault: [
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber,
        BigNumber[],
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        number,
        string[],
        string[],
        boolean,
        BigNumber
      ] & {
        addr: string;
        name: string;
        created: BigNumber;
        active: boolean;
        tvl: BigNumber;
        tvlUsdc: BigNumber;
        decimals: BigNumber;
        underlying: string;
        rewardTokens: string[];
        rewardTokensBal: BigNumber[];
        rewardTokensBalUsdc: BigNumber[];
        duration: BigNumber;
        rewardsApr: BigNumber[];
        ppfsApr: BigNumber;
        users: BigNumber;
        strategy: string;
        strategyCreated: BigNumber;
        platform: number;
        assets: string[];
        strategyRewards: string[];
        strategyOnPause: boolean;
        earned: BigNumber;
      };
      user: [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[]
      ] & {
        wallet: string;
        vault: string;
        underlyingBalance: BigNumber;
        underlyingBalanceUsdc: BigNumber;
        depositedUnderlying: BigNumber;
        depositedUnderlyingUsdc: BigNumber;
        depositedShare: BigNumber;
        rewardTokens: string[];
        rewards: BigNumber[];
        rewardsUsdc: BigNumber[];
        rewardsBoost: BigNumber[];
        rewardsBoostUsdc: BigNumber[];
      };
    })[]
  >;

  vaultWithUserInfoPagesLight(
    _user: string,
    page: BigNumberish,
    pageSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      [
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        string,
        string[],
        BigNumber[],
        BigNumber,
        number,
        string[],
        BigNumber
      ] & {
        addr: string;
        created: BigNumber;
        active: boolean;
        tvl: BigNumber;
        tvlUsdc: BigNumber;
        underlying: string;
        rewardTokens: string[];
        rewardsApr: BigNumber[];
        ppfsApr: BigNumber;
        platform: number;
        assets: string[];
        earned: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber] & {
        depositedUnderlying: BigNumber;
        depositedUnderlyingUsdc: BigNumber;
        depositedShare: BigNumber;
      }
    ] & {
      vault: [
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        string,
        string[],
        BigNumber[],
        BigNumber,
        number,
        string[],
        BigNumber
      ] & {
        addr: string;
        created: BigNumber;
        active: boolean;
        tvl: BigNumber;
        tvlUsdc: BigNumber;
        underlying: string;
        rewardTokens: string[];
        rewardsApr: BigNumber[];
        ppfsApr: BigNumber;
        platform: number;
        assets: string[];
        earned: BigNumber;
      };
      user: [BigNumber, BigNumber, BigNumber] & {
        depositedUnderlying: BigNumber;
        depositedUnderlyingUsdc: BigNumber;
        depositedShare: BigNumber;
      };
    })[]
  >;

  vaultWithUserInfos(
    _user: string,
    _vaults: string[],
    overrides?: CallOverrides
  ): Promise<
    ([
      [
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber,
        BigNumber[],
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        number,
        string[],
        string[],
        boolean,
        BigNumber
      ] & {
        addr: string;
        name: string;
        created: BigNumber;
        active: boolean;
        tvl: BigNumber;
        tvlUsdc: BigNumber;
        decimals: BigNumber;
        underlying: string;
        rewardTokens: string[];
        rewardTokensBal: BigNumber[];
        rewardTokensBalUsdc: BigNumber[];
        duration: BigNumber;
        rewardsApr: BigNumber[];
        ppfsApr: BigNumber;
        users: BigNumber;
        strategy: string;
        strategyCreated: BigNumber;
        platform: number;
        assets: string[];
        strategyRewards: string[];
        strategyOnPause: boolean;
        earned: BigNumber;
      },
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[]
      ] & {
        wallet: string;
        vault: string;
        underlyingBalance: BigNumber;
        underlyingBalanceUsdc: BigNumber;
        depositedUnderlying: BigNumber;
        depositedUnderlyingUsdc: BigNumber;
        depositedShare: BigNumber;
        rewardTokens: string[];
        rewards: BigNumber[];
        rewardsUsdc: BigNumber[];
        rewardsBoost: BigNumber[];
        rewardsBoostUsdc: BigNumber[];
      }
    ] & {
      vault: [
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber,
        BigNumber[],
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        number,
        string[],
        string[],
        boolean,
        BigNumber
      ] & {
        addr: string;
        name: string;
        created: BigNumber;
        active: boolean;
        tvl: BigNumber;
        tvlUsdc: BigNumber;
        decimals: BigNumber;
        underlying: string;
        rewardTokens: string[];
        rewardTokensBal: BigNumber[];
        rewardTokensBalUsdc: BigNumber[];
        duration: BigNumber;
        rewardsApr: BigNumber[];
        ppfsApr: BigNumber;
        users: BigNumber;
        strategy: string;
        strategyCreated: BigNumber;
        platform: number;
        assets: string[];
        strategyRewards: string[];
        strategyOnPause: boolean;
        earned: BigNumber;
      };
      user: [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[]
      ] & {
        wallet: string;
        vault: string;
        underlyingBalance: BigNumber;
        underlyingBalanceUsdc: BigNumber;
        depositedUnderlying: BigNumber;
        depositedUnderlyingUsdc: BigNumber;
        depositedShare: BigNumber;
        rewardTokens: string[];
        rewards: BigNumber[];
        rewardsUsdc: BigNumber[];
        rewardsBoost: BigNumber[];
        rewardsBoostUsdc: BigNumber[];
      };
    })[]
  >;

  vaultWithUserInfosLight(
    _user: string,
    _vaults: string[],
    overrides?: CallOverrides
  ): Promise<
    ([
      [
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        string,
        string[],
        BigNumber[],
        BigNumber,
        number,
        string[],
        BigNumber
      ] & {
        addr: string;
        created: BigNumber;
        active: boolean;
        tvl: BigNumber;
        tvlUsdc: BigNumber;
        underlying: string;
        rewardTokens: string[];
        rewardsApr: BigNumber[];
        ppfsApr: BigNumber;
        platform: number;
        assets: string[];
        earned: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber] & {
        depositedUnderlying: BigNumber;
        depositedUnderlyingUsdc: BigNumber;
        depositedShare: BigNumber;
      }
    ] & {
      vault: [
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        string,
        string[],
        BigNumber[],
        BigNumber,
        number,
        string[],
        BigNumber
      ] & {
        addr: string;
        created: BigNumber;
        active: boolean;
        tvl: BigNumber;
        tvlUsdc: BigNumber;
        underlying: string;
        rewardTokens: string[];
        rewardsApr: BigNumber[];
        ppfsApr: BigNumber;
        platform: number;
        assets: string[];
        earned: BigNumber;
      };
      user: [BigNumber, BigNumber, BigNumber] & {
        depositedUnderlying: BigNumber;
        depositedUnderlyingUsdc: BigNumber;
        depositedShare: BigNumber;
      };
    })[]
  >;

  vaults(overrides?: CallOverrides): Promise<string[]>;

  vaultsLength(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    bookkeeper(overrides?: CallOverrides): Promise<string>;

    computeApr(
      tvl: BigNumberish,
      rewards: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeRewardApr(
      _vault: string,
      rt: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<string>;

    created(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_controller: string, overrides?: CallOverrides): Promise<void>;

    initializeControllable(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isController(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    priceCalculator(overrides?: CallOverrides): Promise<string>;

    setPriceCalculator(
      newValue: string,
      overrides?: CallOverrides
    ): Promise<void>;

    strategies(overrides?: CallOverrides): Promise<string[]>;

    strategiesLength(overrides?: CallOverrides): Promise<BigNumber>;

    strategyAssets(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    strategyCreated(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strategyEarned(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strategyPausedInvesting(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    strategyPlatform(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<number>;

    strategyRewardTokens(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    tetuTokenValues(overrides?: CallOverrides): Promise<BigNumber[]>;

    totalTetuBoughBack(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalTvlUsdc(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalUsers(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalUsersForAllVaults(overrides?: CallOverrides): Promise<BigNumber>;

    userDepositedShare(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDepositedUnderlying(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDepositedUnderlyingUsdc(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInfo(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[]
      ] & {
        wallet: string;
        vault: string;
        underlyingBalance: BigNumber;
        underlyingBalanceUsdc: BigNumber;
        depositedUnderlying: BigNumber;
        depositedUnderlyingUsdc: BigNumber;
        depositedShare: BigNumber;
        rewardTokens: string[];
        rewards: BigNumber[];
        rewardsUsdc: BigNumber[];
        rewardsBoost: BigNumber[];
        rewardsBoostUsdc: BigNumber[];
      }
    >;

    userInfoLight(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        depositedUnderlying: BigNumber;
        depositedUnderlyingUsdc: BigNumber;
        depositedShare: BigNumber;
      }
    >;

    userInfosLight(
      _user: string,
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber] & {
        depositedUnderlying: BigNumber;
        depositedUnderlyingUsdc: BigNumber;
        depositedShare: BigNumber;
      })[]
    >;

    userRewards(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    userRewardsBoost(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    userRewardsBoostUsdc(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    userRewardsUsdc(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    userUnderlyingBalance(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userUnderlyingBalanceUsdc(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultActive(_vault: string, overrides?: CallOverrides): Promise<boolean>;

    vaultCreated(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaultDecimals(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultDuration(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultInfo(
      vault: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber,
        BigNumber[],
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        number,
        string[],
        string[],
        boolean,
        BigNumber
      ] & {
        addr: string;
        name: string;
        created: BigNumber;
        active: boolean;
        tvl: BigNumber;
        tvlUsdc: BigNumber;
        decimals: BigNumber;
        underlying: string;
        rewardTokens: string[];
        rewardTokensBal: BigNumber[];
        rewardTokensBalUsdc: BigNumber[];
        duration: BigNumber;
        rewardsApr: BigNumber[];
        ppfsApr: BigNumber;
        users: BigNumber;
        strategy: string;
        strategyCreated: BigNumber;
        platform: number;
        assets: string[];
        strategyRewards: string[];
        strategyOnPause: boolean;
        earned: BigNumber;
      }
    >;

    vaultInfoLight(
      vault: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        string,
        string[],
        BigNumber[],
        BigNumber,
        number,
        string[],
        BigNumber
      ] & {
        addr: string;
        created: BigNumber;
        active: boolean;
        tvl: BigNumber;
        tvlUsdc: BigNumber;
        underlying: string;
        rewardTokens: string[];
        rewardsApr: BigNumber[];
        ppfsApr: BigNumber;
        platform: number;
        assets: string[];
        earned: BigNumber;
      }
    >;

    vaultInfos(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber,
        BigNumber[],
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        number,
        string[],
        string[],
        boolean,
        BigNumber
      ] & {
        addr: string;
        name: string;
        created: BigNumber;
        active: boolean;
        tvl: BigNumber;
        tvlUsdc: BigNumber;
        decimals: BigNumber;
        underlying: string;
        rewardTokens: string[];
        rewardTokensBal: BigNumber[];
        rewardTokensBalUsdc: BigNumber[];
        duration: BigNumber;
        rewardsApr: BigNumber[];
        ppfsApr: BigNumber;
        users: BigNumber;
        strategy: string;
        strategyCreated: BigNumber;
        platform: number;
        assets: string[];
        strategyRewards: string[];
        strategyOnPause: boolean;
        earned: BigNumber;
      })[]
    >;

    vaultInfosLight(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        string,
        string[],
        BigNumber[],
        BigNumber,
        number,
        string[],
        BigNumber
      ] & {
        addr: string;
        created: BigNumber;
        active: boolean;
        tvl: BigNumber;
        tvlUsdc: BigNumber;
        underlying: string;
        rewardTokens: string[];
        rewardsApr: BigNumber[];
        ppfsApr: BigNumber;
        platform: number;
        assets: string[];
        earned: BigNumber;
      })[]
    >;

    vaultName(_vault: string, overrides?: CallOverrides): Promise<string>;

    vaultPpfsApr(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaultPpfsLastApr(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultRewardTokens(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    vaultRewardTokensBal(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    vaultRewardTokensBalUsdc(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    vaultRewardsApr(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    vaultTvl(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaultTvlUsdc(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaultUnderlying(_vault: string, overrides?: CallOverrides): Promise<string>;

    vaultUsers(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaultWithUserInfoPages(
      _user: string,
      page: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        [
          string,
          string,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string[],
          BigNumber[],
          BigNumber[],
          BigNumber,
          BigNumber[],
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          number,
          string[],
          string[],
          boolean,
          BigNumber
        ] & {
          addr: string;
          name: string;
          created: BigNumber;
          active: boolean;
          tvl: BigNumber;
          tvlUsdc: BigNumber;
          decimals: BigNumber;
          underlying: string;
          rewardTokens: string[];
          rewardTokensBal: BigNumber[];
          rewardTokensBalUsdc: BigNumber[];
          duration: BigNumber;
          rewardsApr: BigNumber[];
          ppfsApr: BigNumber;
          users: BigNumber;
          strategy: string;
          strategyCreated: BigNumber;
          platform: number;
          assets: string[];
          strategyRewards: string[];
          strategyOnPause: boolean;
          earned: BigNumber;
        },
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string[],
          BigNumber[],
          BigNumber[],
          BigNumber[],
          BigNumber[]
        ] & {
          wallet: string;
          vault: string;
          underlyingBalance: BigNumber;
          underlyingBalanceUsdc: BigNumber;
          depositedUnderlying: BigNumber;
          depositedUnderlyingUsdc: BigNumber;
          depositedShare: BigNumber;
          rewardTokens: string[];
          rewards: BigNumber[];
          rewardsUsdc: BigNumber[];
          rewardsBoost: BigNumber[];
          rewardsBoostUsdc: BigNumber[];
        }
      ] & {
        vault: [
          string,
          string,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string[],
          BigNumber[],
          BigNumber[],
          BigNumber,
          BigNumber[],
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          number,
          string[],
          string[],
          boolean,
          BigNumber
        ] & {
          addr: string;
          name: string;
          created: BigNumber;
          active: boolean;
          tvl: BigNumber;
          tvlUsdc: BigNumber;
          decimals: BigNumber;
          underlying: string;
          rewardTokens: string[];
          rewardTokensBal: BigNumber[];
          rewardTokensBalUsdc: BigNumber[];
          duration: BigNumber;
          rewardsApr: BigNumber[];
          ppfsApr: BigNumber;
          users: BigNumber;
          strategy: string;
          strategyCreated: BigNumber;
          platform: number;
          assets: string[];
          strategyRewards: string[];
          strategyOnPause: boolean;
          earned: BigNumber;
        };
        user: [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string[],
          BigNumber[],
          BigNumber[],
          BigNumber[],
          BigNumber[]
        ] & {
          wallet: string;
          vault: string;
          underlyingBalance: BigNumber;
          underlyingBalanceUsdc: BigNumber;
          depositedUnderlying: BigNumber;
          depositedUnderlyingUsdc: BigNumber;
          depositedShare: BigNumber;
          rewardTokens: string[];
          rewards: BigNumber[];
          rewardsUsdc: BigNumber[];
          rewardsBoost: BigNumber[];
          rewardsBoostUsdc: BigNumber[];
        };
      })[]
    >;

    vaultWithUserInfoPagesLight(
      _user: string,
      page: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        [
          string,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string[],
          BigNumber[],
          BigNumber,
          number,
          string[],
          BigNumber
        ] & {
          addr: string;
          created: BigNumber;
          active: boolean;
          tvl: BigNumber;
          tvlUsdc: BigNumber;
          underlying: string;
          rewardTokens: string[];
          rewardsApr: BigNumber[];
          ppfsApr: BigNumber;
          platform: number;
          assets: string[];
          earned: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          depositedUnderlying: BigNumber;
          depositedUnderlyingUsdc: BigNumber;
          depositedShare: BigNumber;
        }
      ] & {
        vault: [
          string,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string[],
          BigNumber[],
          BigNumber,
          number,
          string[],
          BigNumber
        ] & {
          addr: string;
          created: BigNumber;
          active: boolean;
          tvl: BigNumber;
          tvlUsdc: BigNumber;
          underlying: string;
          rewardTokens: string[];
          rewardsApr: BigNumber[];
          ppfsApr: BigNumber;
          platform: number;
          assets: string[];
          earned: BigNumber;
        };
        user: [BigNumber, BigNumber, BigNumber] & {
          depositedUnderlying: BigNumber;
          depositedUnderlyingUsdc: BigNumber;
          depositedShare: BigNumber;
        };
      })[]
    >;

    vaultWithUserInfos(
      _user: string,
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<
      ([
        [
          string,
          string,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string[],
          BigNumber[],
          BigNumber[],
          BigNumber,
          BigNumber[],
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          number,
          string[],
          string[],
          boolean,
          BigNumber
        ] & {
          addr: string;
          name: string;
          created: BigNumber;
          active: boolean;
          tvl: BigNumber;
          tvlUsdc: BigNumber;
          decimals: BigNumber;
          underlying: string;
          rewardTokens: string[];
          rewardTokensBal: BigNumber[];
          rewardTokensBalUsdc: BigNumber[];
          duration: BigNumber;
          rewardsApr: BigNumber[];
          ppfsApr: BigNumber;
          users: BigNumber;
          strategy: string;
          strategyCreated: BigNumber;
          platform: number;
          assets: string[];
          strategyRewards: string[];
          strategyOnPause: boolean;
          earned: BigNumber;
        },
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string[],
          BigNumber[],
          BigNumber[],
          BigNumber[],
          BigNumber[]
        ] & {
          wallet: string;
          vault: string;
          underlyingBalance: BigNumber;
          underlyingBalanceUsdc: BigNumber;
          depositedUnderlying: BigNumber;
          depositedUnderlyingUsdc: BigNumber;
          depositedShare: BigNumber;
          rewardTokens: string[];
          rewards: BigNumber[];
          rewardsUsdc: BigNumber[];
          rewardsBoost: BigNumber[];
          rewardsBoostUsdc: BigNumber[];
        }
      ] & {
        vault: [
          string,
          string,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string[],
          BigNumber[],
          BigNumber[],
          BigNumber,
          BigNumber[],
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          number,
          string[],
          string[],
          boolean,
          BigNumber
        ] & {
          addr: string;
          name: string;
          created: BigNumber;
          active: boolean;
          tvl: BigNumber;
          tvlUsdc: BigNumber;
          decimals: BigNumber;
          underlying: string;
          rewardTokens: string[];
          rewardTokensBal: BigNumber[];
          rewardTokensBalUsdc: BigNumber[];
          duration: BigNumber;
          rewardsApr: BigNumber[];
          ppfsApr: BigNumber;
          users: BigNumber;
          strategy: string;
          strategyCreated: BigNumber;
          platform: number;
          assets: string[];
          strategyRewards: string[];
          strategyOnPause: boolean;
          earned: BigNumber;
        };
        user: [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string[],
          BigNumber[],
          BigNumber[],
          BigNumber[],
          BigNumber[]
        ] & {
          wallet: string;
          vault: string;
          underlyingBalance: BigNumber;
          underlyingBalanceUsdc: BigNumber;
          depositedUnderlying: BigNumber;
          depositedUnderlyingUsdc: BigNumber;
          depositedShare: BigNumber;
          rewardTokens: string[];
          rewards: BigNumber[];
          rewardsUsdc: BigNumber[];
          rewardsBoost: BigNumber[];
          rewardsBoostUsdc: BigNumber[];
        };
      })[]
    >;

    vaultWithUserInfosLight(
      _user: string,
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<
      ([
        [
          string,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string[],
          BigNumber[],
          BigNumber,
          number,
          string[],
          BigNumber
        ] & {
          addr: string;
          created: BigNumber;
          active: boolean;
          tvl: BigNumber;
          tvlUsdc: BigNumber;
          underlying: string;
          rewardTokens: string[];
          rewardsApr: BigNumber[];
          ppfsApr: BigNumber;
          platform: number;
          assets: string[];
          earned: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          depositedUnderlying: BigNumber;
          depositedUnderlyingUsdc: BigNumber;
          depositedShare: BigNumber;
        }
      ] & {
        vault: [
          string,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string[],
          BigNumber[],
          BigNumber,
          number,
          string[],
          BigNumber
        ] & {
          addr: string;
          created: BigNumber;
          active: boolean;
          tvl: BigNumber;
          tvlUsdc: BigNumber;
          underlying: string;
          rewardTokens: string[];
          rewardsApr: BigNumber[];
          ppfsApr: BigNumber;
          platform: number;
          assets: string[];
          earned: BigNumber;
        };
        user: [BigNumber, BigNumber, BigNumber] & {
          depositedUnderlying: BigNumber;
          depositedUnderlyingUsdc: BigNumber;
          depositedShare: BigNumber;
        };
      })[]
    >;

    vaults(overrides?: CallOverrides): Promise<string[]>;

    vaultsLength(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    ToolAddressUpdated(
      newValue?: null
    ): TypedEventFilter<[string], { newValue: string }>;

    UpdateController(
      oldValue?: null,
      newValue?: null
    ): TypedEventFilter<
      [string, string],
      { oldValue: string; newValue: string }
    >;
  };

  estimateGas: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    bookkeeper(overrides?: CallOverrides): Promise<BigNumber>;

    computeApr(
      tvl: BigNumberish,
      rewards: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeRewardApr(
      _vault: string,
      rt: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    created(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isController(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    priceCalculator(overrides?: CallOverrides): Promise<BigNumber>;

    setPriceCalculator(
      newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategies(overrides?: CallOverrides): Promise<BigNumber>;

    strategiesLength(overrides?: CallOverrides): Promise<BigNumber>;

    strategyAssets(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strategyCreated(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strategyEarned(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strategyPausedInvesting(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strategyPlatform(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strategyRewardTokens(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tetuTokenValues(overrides?: CallOverrides): Promise<BigNumber>;

    totalTetuBoughBack(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalTvlUsdc(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalUsers(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalUsersForAllVaults(overrides?: CallOverrides): Promise<BigNumber>;

    userDepositedShare(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDepositedUnderlying(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDepositedUnderlyingUsdc(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInfo(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInfoLight(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInfosLight(
      _user: string,
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRewards(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRewardsBoost(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRewardsBoostUsdc(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRewardsUsdc(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userUnderlyingBalance(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userUnderlyingBalanceUsdc(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultActive(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaultCreated(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaultDecimals(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultDuration(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultInfo(vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaultInfoLight(
      vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultInfos(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultInfosLight(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultName(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaultPpfsApr(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaultPpfsLastApr(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultRewardTokens(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultRewardTokensBal(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultRewardTokensBalUsdc(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultRewardsApr(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultTvl(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaultTvlUsdc(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaultUnderlying(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultUsers(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaultWithUserInfoPages(
      _user: string,
      page: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultWithUserInfoPagesLight(
      _user: string,
      page: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultWithUserInfos(
      _user: string,
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultWithUserInfosLight(
      _user: string,
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaults(overrides?: CallOverrides): Promise<BigNumber>;

    vaultsLength(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bookkeeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    computeApr(
      tvl: BigNumberish,
      rewards: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeRewardApr(
      _vault: string,
      rt: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    created(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isController(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGovernance(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceCalculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPriceCalculator(
      newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategiesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategyAssets(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strategyCreated(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strategyEarned(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strategyPausedInvesting(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strategyPlatform(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strategyRewardTokens(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tetuTokenValues(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTetuBoughBack(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTvlUsdc(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalUsers(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalUsersForAllVaults(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userDepositedShare(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userDepositedUnderlying(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userDepositedUnderlyingUsdc(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfoLight(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfosLight(
      _user: string,
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRewards(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRewardsBoost(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRewardsBoostUsdc(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRewardsUsdc(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userUnderlyingBalance(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userUnderlyingBalanceUsdc(
      _user: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultActive(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultCreated(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultDecimals(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultDuration(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultInfo(
      vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultInfoLight(
      vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultInfos(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultInfosLight(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultName(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultPpfsApr(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultPpfsLastApr(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultRewardTokens(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultRewardTokensBal(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultRewardTokensBalUsdc(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultRewardsApr(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultTvl(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultTvlUsdc(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultUnderlying(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultUsers(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultWithUserInfoPages(
      _user: string,
      page: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultWithUserInfoPagesLight(
      _user: string,
      page: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultWithUserInfos(
      _user: string,
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultWithUserInfosLight(
      _user: string,
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaults(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
