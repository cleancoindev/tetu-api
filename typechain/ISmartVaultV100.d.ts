/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ISmartVaultV100Interface extends ethers.utils.Interface {
  functions: {
    "active()": FunctionFragment;
    "addRewardToken(address)": FunctionFragment;
    "availableToInvestOut()": FunctionFragment;
    "changeActivityStatus(bool)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositAndInvest(uint256)": FunctionFragment;
    "depositFor(uint256,address)": FunctionFragment;
    "doHardWork()": FunctionFragment;
    "duration()": FunctionFragment;
    "earned(address,address)": FunctionFragment;
    "exit()": FunctionFragment;
    "getAllRewards()": FunctionFragment;
    "getPricePerFullShare()": FunctionFragment;
    "getReward(address)": FunctionFragment;
    "getRewardTokenIndex(address)": FunctionFragment;
    "lastTimeRewardApplicable(address)": FunctionFragment;
    "lastUpdateTimeForToken(address)": FunctionFragment;
    "notifyTargetRewardAmount(address,uint256)": FunctionFragment;
    "periodFinishForToken(address)": FunctionFragment;
    "removeRewardToken(address)": FunctionFragment;
    "rewardPerToken(address)": FunctionFragment;
    "rewardPerTokenStoredForToken(address)": FunctionFragment;
    "rewardRateForToken(address)": FunctionFragment;
    "rewardTokens()": FunctionFragment;
    "rewardTokensLength()": FunctionFragment;
    "rewardsForToken(address,address)": FunctionFragment;
    "setStrategy(address)": FunctionFragment;
    "strategy()": FunctionFragment;
    "underlying()": FunctionFragment;
    "underlyingBalanceInVault()": FunctionFragment;
    "underlyingBalanceWithInvestment()": FunctionFragment;
    "underlyingBalanceWithInvestmentForHolder(address)": FunctionFragment;
    "underlyingUnit()": FunctionFragment;
    "userLastWithdrawTs(address)": FunctionFragment;
    "userRewardPerTokenPaidForToken(address,address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addRewardToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "availableToInvestOut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeActivityStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndInvest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "doHardWork",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "earned",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "exit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPricePerFullShare",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getReward", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRewardTokenIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTimeForToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyTargetRewardAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "periodFinishForToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRewardToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenStoredForToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRateForToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokensLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsForToken",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "setStrategy", values: [string]): string;
  encodeFunctionData(functionFragment: "strategy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingBalanceInVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingBalanceWithInvestment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingBalanceWithInvestmentForHolder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userLastWithdrawTs",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardPerTokenPaidForToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableToInvestOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeActivityStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAndInvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doHardWork", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPricePerFullShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokenIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTimeForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyTargetRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodFinishForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenStoredForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardRateForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingBalanceInVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingBalanceWithInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingBalanceWithInvestmentForHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLastWithdrawTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerTokenPaidForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class ISmartVaultV100 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISmartVaultV100Interface;

  functions: {
    active(overrides?: CallOverrides): Promise<[boolean]>;

    addRewardToken(
      rt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    availableToInvestOut(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeActivityStatus(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositAndInvest(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositFor(
      amount: BigNumberish,
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    doHardWork(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    earned(
      rt: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReward(
      rt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewardTokenIndex(
      rt: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastTimeRewardApplicable(
      rt: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastUpdateTimeForToken(
      _rt: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    notifyTargetRewardAmount(
      _rewardToken: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    periodFinishForToken(
      _rt: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeRewardToken(
      rt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPerToken(rt: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerTokenStoredForToken(
      _rt: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardRateForToken(
      _rt: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardTokens(overrides?: CallOverrides): Promise<[string[]]>;

    rewardTokensLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsForToken(
      _rt: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategy(overrides?: CallOverrides): Promise<[string]>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    underlyingBalanceInVault(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlyingBalanceWithInvestment(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    underlyingBalanceWithInvestmentForHolder(
      holder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    underlyingUnit(overrides?: CallOverrides): Promise<[BigNumber]>;

    userLastWithdrawTs(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userRewardPerTokenPaidForToken(
      _rt: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      numberOfShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  active(overrides?: CallOverrides): Promise<boolean>;

  addRewardToken(
    rt: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  availableToInvestOut(overrides?: CallOverrides): Promise<BigNumber>;

  changeActivityStatus(
    _active: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositAndInvest(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositFor(
    amount: BigNumberish,
    holder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  doHardWork(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  duration(overrides?: CallOverrides): Promise<BigNumber>;

  earned(
    rt: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

  getReward(
    rt: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewardTokenIndex(
    rt: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastTimeRewardApplicable(
    rt: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastUpdateTimeForToken(
    _rt: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  notifyTargetRewardAmount(
    _rewardToken: string,
    reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  periodFinishForToken(
    _rt: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeRewardToken(
    rt: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPerToken(rt: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerTokenStoredForToken(
    _rt: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardRateForToken(
    _rt: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardTokens(overrides?: CallOverrides): Promise<string[]>;

  rewardTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsForToken(
    _rt: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setStrategy(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategy(overrides?: CallOverrides): Promise<string>;

  underlying(overrides?: CallOverrides): Promise<string>;

  underlyingBalanceInVault(overrides?: CallOverrides): Promise<BigNumber>;

  underlyingBalanceWithInvestment(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  underlyingBalanceWithInvestmentForHolder(
    holder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  underlyingUnit(overrides?: CallOverrides): Promise<BigNumber>;

  userLastWithdrawTs(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userRewardPerTokenPaidForToken(
    _rt: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    numberOfShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    active(overrides?: CallOverrides): Promise<boolean>;

    addRewardToken(rt: string, overrides?: CallOverrides): Promise<void>;

    availableToInvestOut(overrides?: CallOverrides): Promise<BigNumber>;

    changeActivityStatus(
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositAndInvest(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositFor(
      amount: BigNumberish,
      holder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    doHardWork(overrides?: CallOverrides): Promise<void>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    earned(
      rt: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exit(overrides?: CallOverrides): Promise<void>;

    getAllRewards(overrides?: CallOverrides): Promise<void>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(rt: string, overrides?: CallOverrides): Promise<void>;

    getRewardTokenIndex(
      rt: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastTimeRewardApplicable(
      rt: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastUpdateTimeForToken(
      _rt: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    notifyTargetRewardAmount(
      _rewardToken: string,
      reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    periodFinishForToken(
      _rt: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeRewardToken(rt: string, overrides?: CallOverrides): Promise<void>;

    rewardPerToken(rt: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStoredForToken(
      _rt: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardRateForToken(
      _rt: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokens(overrides?: CallOverrides): Promise<string[]>;

    rewardTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsForToken(
      _rt: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setStrategy(_strategy: string, overrides?: CallOverrides): Promise<void>;

    strategy(overrides?: CallOverrides): Promise<string>;

    underlying(overrides?: CallOverrides): Promise<string>;

    underlyingBalanceInVault(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingBalanceWithInvestment(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingBalanceWithInvestmentForHolder(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingUnit(overrides?: CallOverrides): Promise<BigNumber>;

    userLastWithdrawTs(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRewardPerTokenPaidForToken(
      _rt: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    active(overrides?: CallOverrides): Promise<BigNumber>;

    addRewardToken(
      rt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    availableToInvestOut(overrides?: CallOverrides): Promise<BigNumber>;

    changeActivityStatus(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositAndInvest(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositFor(
      amount: BigNumberish,
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    doHardWork(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    earned(
      rt: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(
      rt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewardTokenIndex(
      rt: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastTimeRewardApplicable(
      rt: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastUpdateTimeForToken(
      _rt: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    notifyTargetRewardAmount(
      _rewardToken: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    periodFinishForToken(
      _rt: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeRewardToken(
      rt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPerToken(rt: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStoredForToken(
      _rt: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardRateForToken(
      _rt: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokens(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsForToken(
      _rt: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategy(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingBalanceInVault(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingBalanceWithInvestment(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingBalanceWithInvestmentForHolder(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingUnit(overrides?: CallOverrides): Promise<BigNumber>;

    userLastWithdrawTs(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userRewardPerTokenPaidForToken(
      _rt: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      numberOfShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    active(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRewardToken(
      rt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    availableToInvestOut(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeActivityStatus(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositAndInvest(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositFor(
      amount: BigNumberish,
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    doHardWork(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earned(
      rt: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPricePerFullShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(
      rt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewardTokenIndex(
      rt: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      rt: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdateTimeForToken(
      _rt: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    notifyTargetRewardAmount(
      _rewardToken: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    periodFinishForToken(
      _rt: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeRewardToken(
      rt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerToken(
      rt: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerTokenStoredForToken(
      _rt: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardRateForToken(
      _rt: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokensLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsForToken(
      _rt: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingBalanceInVault(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingBalanceWithInvestment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingBalanceWithInvestmentForHolder(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userLastWithdrawTs(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userRewardPerTokenPaidForToken(
      _rt: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      numberOfShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
