/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BookkeeperInterface extends ethers.utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "_strategies(uint256)": FunctionFragment;
    "_vaults(uint256)": FunctionFragment;
    "addStrategy(address)": FunctionFragment;
    "addVault(address)": FunctionFragment;
    "addVaultAndStrategy(address,address)": FunctionFragment;
    "controller()": FunctionFragment;
    "created()": FunctionFragment;
    "fundKeeperEarned(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "initializeControllable(address)": FunctionFragment;
    "isController(address)": FunctionFragment;
    "isGovernance(address)": FunctionFragment;
    "lastHardWork(address)": FunctionFragment;
    "lastPpfsChange(address)": FunctionFragment;
    "registerFundKeeperEarned(address,uint256)": FunctionFragment;
    "registerPpfsChange(address,uint256)": FunctionFragment;
    "registerStrategyEarned(uint256)": FunctionFragment;
    "registerUserAction(address,uint256,bool)": FunctionFragment;
    "registerUserEarned(address,address,address,uint256)": FunctionFragment;
    "registerVaultTransfer(address,address,uint256)": FunctionFragment;
    "removeFromStrategies(uint256)": FunctionFragment;
    "removeFromVaults(uint256)": FunctionFragment;
    "strategies()": FunctionFragment;
    "strategiesLength()": FunctionFragment;
    "targetTokenEarned(address)": FunctionFragment;
    "userEarned(address,address,address)": FunctionFragment;
    "vaultUsersBalances(address,address)": FunctionFragment;
    "vaultUsersQuantity(address)": FunctionFragment;
    "vaults()": FunctionFragment;
    "vaultsLength()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_strategies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_vaults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addStrategy", values: [string]): string;
  encodeFunctionData(functionFragment: "addVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addVaultAndStrategy",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "created", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundKeeperEarned",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initializeControllable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastHardWork",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastPpfsChange",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerFundKeeperEarned",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPpfsChange",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerStrategyEarned",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUserAction",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUserEarned",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVaultTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromStrategies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromVaults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strategiesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetTokenEarned",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userEarned",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultUsersBalances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultUsersQuantity",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vaults", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vaultsLength",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_strategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_vaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addVaultAndStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "created", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundKeeperEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeControllable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastHardWork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPpfsChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerFundKeeperEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPpfsChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerStrategyEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUserAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUserEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVaultTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strategiesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetTokenEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userEarned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultUsersBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultUsersQuantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultsLength",
    data: BytesLike
  ): Result;

  events: {
    "RegisterFundKeeperEarned(address,uint256)": EventFragment;
    "RegisterPpfsChange(address,uint256,uint256)": EventFragment;
    "RegisterStrategy(address)": EventFragment;
    "RegisterStrategyEarned(address,uint256)": EventFragment;
    "RegisterUserAction(address,uint256,bool)": EventFragment;
    "RegisterUserEarned(address,address,address,uint256)": EventFragment;
    "RegisterVault(address)": EventFragment;
    "RemoveStrategy(address)": EventFragment;
    "RemoveVault(address)": EventFragment;
    "UpdateController(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RegisterFundKeeperEarned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterPpfsChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterStrategy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterStrategyEarned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterUserAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterUserEarned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveStrategy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateController"): EventFragment;
}

export class Bookkeeper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BookkeeperInterface;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    _strategies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _vaults(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    addStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addVault(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addVaultAndStrategy(
      _vault: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string] & { adr: string }>;

    created(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ts: BigNumber }>;

    fundKeeperEarned(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isController(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    lastHardWork(
      vault: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber] & {
          strategy: string;
          block: BigNumber;
          time: BigNumber;
          targetTokenAmount: BigNumber;
        }
      ]
    >;

    lastPpfsChange(
      vault: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          vault: string;
          block: BigNumber;
          time: BigNumber;
          value: BigNumber;
          oldBlock: BigNumber;
          oldTime: BigNumber;
          oldValue: BigNumber;
        }
      ]
    >;

    registerFundKeeperEarned(
      _token: string,
      _fundTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerPpfsChange(
      vault: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerStrategyEarned(
      _targetTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerUserAction(
      _user: string,
      _amount: BigNumberish,
      _deposit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerUserEarned(
      _user: string,
      _vault: string,
      _rt: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerVaultTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeFromStrategies(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeFromVaults(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategies(overrides?: CallOverrides): Promise<[string[]]>;

    strategiesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    targetTokenEarned(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userEarned(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultUsersBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultUsersQuantity(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaults(overrides?: CallOverrides): Promise<[string[]]>;

    vaultsLength(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  _strategies(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  _vaults(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  addStrategy(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addVault(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addVaultAndStrategy(
    _vault: string,
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  created(overrides?: CallOverrides): Promise<BigNumber>;

  fundKeeperEarned(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeControllable(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isController(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  isGovernance(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  lastHardWork(
    vault: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      strategy: string;
      block: BigNumber;
      time: BigNumber;
      targetTokenAmount: BigNumber;
    }
  >;

  lastPpfsChange(
    vault: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      vault: string;
      block: BigNumber;
      time: BigNumber;
      value: BigNumber;
      oldBlock: BigNumber;
      oldTime: BigNumber;
      oldValue: BigNumber;
    }
  >;

  registerFundKeeperEarned(
    _token: string,
    _fundTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerPpfsChange(
    vault: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerStrategyEarned(
    _targetTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerUserAction(
    _user: string,
    _amount: BigNumberish,
    _deposit: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerUserEarned(
    _user: string,
    _vault: string,
    _rt: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerVaultTransfer(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeFromStrategies(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeFromVaults(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategies(overrides?: CallOverrides): Promise<string[]>;

  strategiesLength(overrides?: CallOverrides): Promise<BigNumber>;

  targetTokenEarned(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userEarned(
    arg0: string,
    arg1: string,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaultUsersBalances(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaultUsersQuantity(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaults(overrides?: CallOverrides): Promise<string[]>;

  vaultsLength(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    _strategies(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    _vaults(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    addStrategy(_strategy: string, overrides?: CallOverrides): Promise<void>;

    addVault(_vault: string, overrides?: CallOverrides): Promise<void>;

    addVaultAndStrategy(
      _vault: string,
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    created(overrides?: CallOverrides): Promise<BigNumber>;

    fundKeeperEarned(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(_controller: string, overrides?: CallOverrides): Promise<void>;

    initializeControllable(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isController(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    lastHardWork(
      vault: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        strategy: string;
        block: BigNumber;
        time: BigNumber;
        targetTokenAmount: BigNumber;
      }
    >;

    lastPpfsChange(
      vault: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        vault: string;
        block: BigNumber;
        time: BigNumber;
        value: BigNumber;
        oldBlock: BigNumber;
        oldTime: BigNumber;
        oldValue: BigNumber;
      }
    >;

    registerFundKeeperEarned(
      _token: string,
      _fundTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerPpfsChange(
      vault: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerStrategyEarned(
      _targetTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerUserAction(
      _user: string,
      _amount: BigNumberish,
      _deposit: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    registerUserEarned(
      _user: string,
      _vault: string,
      _rt: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerVaultTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromStrategies(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromVaults(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    strategies(overrides?: CallOverrides): Promise<string[]>;

    strategiesLength(overrides?: CallOverrides): Promise<BigNumber>;

    targetTokenEarned(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userEarned(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultUsersBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultUsersQuantity(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaults(overrides?: CallOverrides): Promise<string[]>;

    vaultsLength(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    RegisterFundKeeperEarned(
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    RegisterPpfsChange(
      vault?: string | null,
      oldValue?: null,
      newValue?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { vault: string; oldValue: BigNumber; newValue: BigNumber }
    >;

    RegisterStrategy(
      value?: null
    ): TypedEventFilter<[string], { value: string }>;

    RegisterStrategyEarned(
      strategy?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { strategy: string; amount: BigNumber }
    >;

    RegisterUserAction(
      user?: string | null,
      amount?: null,
      deposit?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { user: string; amount: BigNumber; deposit: boolean }
    >;

    RegisterUserEarned(
      user?: string | null,
      vault?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { user: string; vault: string; token: string; amount: BigNumber }
    >;

    RegisterVault(value?: null): TypedEventFilter<[string], { value: string }>;

    RemoveStrategy(value?: null): TypedEventFilter<[string], { value: string }>;

    RemoveVault(value?: null): TypedEventFilter<[string], { value: string }>;

    UpdateController(
      oldValue?: null,
      newValue?: null
    ): TypedEventFilter<
      [string, string],
      { oldValue: string; newValue: string }
    >;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    _strategies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _vaults(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    addStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addVault(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addVaultAndStrategy(
      _vault: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    created(overrides?: CallOverrides): Promise<BigNumber>;

    fundKeeperEarned(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isController(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastHardWork(vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastPpfsChange(
      vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerFundKeeperEarned(
      _token: string,
      _fundTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerPpfsChange(
      vault: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerStrategyEarned(
      _targetTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerUserAction(
      _user: string,
      _amount: BigNumberish,
      _deposit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerUserEarned(
      _user: string,
      _vault: string,
      _rt: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerVaultTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeFromStrategies(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeFromVaults(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategies(overrides?: CallOverrides): Promise<BigNumber>;

    strategiesLength(overrides?: CallOverrides): Promise<BigNumber>;

    targetTokenEarned(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userEarned(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultUsersBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultUsersQuantity(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaults(overrides?: CallOverrides): Promise<BigNumber>;

    vaultsLength(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _strategies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _vaults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addVault(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addVaultAndStrategy(
      _vault: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    created(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundKeeperEarned(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isController(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGovernance(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastHardWork(
      vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPpfsChange(
      vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerFundKeeperEarned(
      _token: string,
      _fundTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerPpfsChange(
      vault: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerStrategyEarned(
      _targetTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerUserAction(
      _user: string,
      _amount: BigNumberish,
      _deposit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerUserEarned(
      _user: string,
      _vault: string,
      _rt: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerVaultTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeFromStrategies(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeFromVaults(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategiesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetTokenEarned(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userEarned(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultUsersBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultUsersQuantity(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaults(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
