/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ControllerInterface extends ethers.utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "addHardWorker(address)": FunctionFragment;
    "addStrategy(address)": FunctionFragment;
    "addToWhiteList(address)": FunctionFragment;
    "addToWhiteListMulti(address[])": FunctionFragment;
    "addVaultAndStrategy(address,address)": FunctionFragment;
    "addVaultsAndStrategies(address[],address[])": FunctionFragment;
    "announcer()": FunctionFragment;
    "bookkeeper()": FunctionFragment;
    "controller()": FunctionFragment;
    "controllerTokenMove(address,address,uint256)": FunctionFragment;
    "created()": FunctionFragment;
    "dao()": FunctionFragment;
    "doHardWork(address)": FunctionFragment;
    "feeRewardForwarder()": FunctionFragment;
    "fund()": FunctionFragment;
    "fundDenominator()": FunctionFragment;
    "fundKeeperTokenMove(address,address,uint256)": FunctionFragment;
    "fundNumerator()": FunctionFragment;
    "fundToken()": FunctionFragment;
    "governance()": FunctionFragment;
    "hardWorkers(address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "initializeControllable(address)": FunctionFragment;
    "initializeControllerStorage(address)": FunctionFragment;
    "isAllowedUser(address)": FunctionFragment;
    "isController(address)": FunctionFragment;
    "isDao(address)": FunctionFragment;
    "isGovernance(address)": FunctionFragment;
    "isHardWorker(address)": FunctionFragment;
    "isRewardDistributor(address)": FunctionFragment;
    "isValidStrategy(address)": FunctionFragment;
    "isValidVault(address)": FunctionFragment;
    "mintAndDistribute(uint256,address,address,bool)": FunctionFragment;
    "mintHelper()": FunctionFragment;
    "psDenominator()": FunctionFragment;
    "psNumerator()": FunctionFragment;
    "psVault()": FunctionFragment;
    "removeFromWhiteList(address)": FunctionFragment;
    "removeFromWhiteListMulti(address[])": FunctionFragment;
    "removeHardWorker(address)": FunctionFragment;
    "rewardDistribution(address)": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "setAnnouncer(address)": FunctionFragment;
    "setBookkeeper(address)": FunctionFragment;
    "setDao(address)": FunctionFragment;
    "setFeeRewardForwarder(address)": FunctionFragment;
    "setFund(address)": FunctionFragment;
    "setFundNumeratorDenominator(uint256,uint256)": FunctionFragment;
    "setFundToken(address)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setMintHelper(address)": FunctionFragment;
    "setPSNumeratorDenominator(uint256,uint256)": FunctionFragment;
    "setPsVault(address)": FunctionFragment;
    "setRewardDistribution(address[],bool)": FunctionFragment;
    "setRewardToken(address)": FunctionFragment;
    "setVaultController(address)": FunctionFragment;
    "setVaultStrategy(address,address)": FunctionFragment;
    "setVaultStrategyBatch(address[],address[])": FunctionFragment;
    "strategies(address)": FunctionFragment;
    "strategyTokenMove(address,address,uint256)": FunctionFragment;
    "upgradeTetuProxy(address,address)": FunctionFragment;
    "upgradeTetuProxyBatch(address[],address[])": FunctionFragment;
    "vaultController()": FunctionFragment;
    "vaults(address)": FunctionFragment;
    "whiteList(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addHardWorker",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addStrategy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addToWhiteList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhiteListMulti",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addVaultAndStrategy",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addVaultsAndStrategies",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(functionFragment: "announcer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bookkeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controllerTokenMove",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "created", values?: undefined): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(functionFragment: "doHardWork", values: [string]): string;
  encodeFunctionData(
    functionFragment: "feeRewardForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundKeeperTokenMove",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fundToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hardWorkers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeControllable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeControllerStorage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isDao", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isHardWorker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRewardDistributor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidStrategy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndDistribute",
    values: [BigNumberish, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "mintHelper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "psDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "psNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "psVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFromWhiteList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhiteListMulti",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeHardWorker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDistribution",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAnnouncer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBookkeeper",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setDao", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFeeRewardForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setFund", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFundNumeratorDenominator",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintHelper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPSNumeratorDenominator",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPsVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRewardDistribution",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultStrategy",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultStrategyBatch",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(functionFragment: "strategies", values: [string]): string;
  encodeFunctionData(
    functionFragment: "strategyTokenMove",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTetuProxy",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTetuProxyBatch",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultController",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vaults", values: [string]): string;
  encodeFunctionData(functionFragment: "whiteList", values: [string]): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addHardWorker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToWhiteListMulti",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addVaultAndStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addVaultsAndStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "announcer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bookkeeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "controllerTokenMove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "created", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doHardWork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRewardForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundKeeperTokenMove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hardWorkers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeControllable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeControllerStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isHardWorker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndDistribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintHelper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "psDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "psNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "psVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhiteListMulti",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeHardWorker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAnnouncer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBookkeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRewardForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFundNumeratorDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPSNumeratorDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPsVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultStrategyBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strategyTokenMove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeTetuProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeTetuProxyBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whiteList", data: BytesLike): Result;

  events: {
    "AddedToWhiteList(address)": EventFragment;
    "ControllerTokenMoved(address,address,uint256)": EventFragment;
    "FundKeeperTokenMoved(address,address,uint256)": EventFragment;
    "HardWorkerAdded(address)": EventFragment;
    "HardWorkerRemoved(address)": EventFragment;
    "RemovedFromWhiteList(address)": EventFragment;
    "SharePriceChangeLog(address,address,uint256,uint256,uint256)": EventFragment;
    "StrategyTokenMoved(address,address,uint256)": EventFragment;
    "UpdateController(address,address)": EventFragment;
    "UpdatedAddressSlot(string,address,address)": EventFragment;
    "UpdatedUint256Slot(string,uint256,uint256)": EventFragment;
    "VaultAndStrategyAdded(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedToWhiteList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerTokenMoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundKeeperTokenMoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HardWorkerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HardWorkerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedFromWhiteList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SharePriceChangeLog"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyTokenMoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedAddressSlot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedUint256Slot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultAndStrategyAdded"): EventFragment;
}

export class Controller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ControllerInterface;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    addHardWorker(
      _worker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToWhiteList(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToWhiteListMulti(
      _targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addVaultAndStrategy(
      _vault: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addVaultsAndStrategies(
      _vaults: string[],
      _strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    announcer(overrides?: CallOverrides): Promise<[string]>;

    bookkeeper(overrides?: CallOverrides): Promise<[string]>;

    controller(overrides?: CallOverrides): Promise<[string] & { adr: string }>;

    controllerTokenMove(
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    created(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ts: BigNumber }>;

    dao(overrides?: CallOverrides): Promise<[string]>;

    doHardWork(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeRewardForwarder(overrides?: CallOverrides): Promise<[string]>;

    fund(overrides?: CallOverrides): Promise<[string]>;

    fundDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundKeeperTokenMove(
      _fund: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundToken(overrides?: CallOverrides): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    hardWorkers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeControllerStorage(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAllowedUser(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isController(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isDao(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isHardWorker(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isRewardDistributor(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidStrategy(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidVault(_vault: string, overrides?: CallOverrides): Promise<[boolean]>;

    mintAndDistribute(
      totalAmount: BigNumberish,
      _distributor: string,
      _otherNetworkFund: string,
      mintAllAvailable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintHelper(overrides?: CallOverrides): Promise<[string]>;

    psDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    psNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;

    psVault(overrides?: CallOverrides): Promise<[string]>;

    removeFromWhiteList(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeFromWhiteListMulti(
      _targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeHardWorker(
      _worker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardDistribution(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    setAnnouncer(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBookkeeper(
      _bookkeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDao(
      _dao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeRewardForwarder(
      _feeRewardForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFund(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundNumeratorDenominator(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundToken(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintHelper(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPSNumeratorDenominator(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPsVault(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardDistribution(
      _newRewardDistribution: string[],
      _flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardToken(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVaultController(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVaultStrategy(
      _target: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVaultStrategyBatch(
      _vaults: string[],
      _strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategies(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    strategyTokenMove(
      _strategy: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTetuProxy(
      _contract: string,
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTetuProxyBatch(
      _contracts: string[],
      _implementations: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultController(overrides?: CallOverrides): Promise<[string]>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    whiteList(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  addHardWorker(
    _worker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addStrategy(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToWhiteList(
    _target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToWhiteListMulti(
    _targets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addVaultAndStrategy(
    _vault: string,
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addVaultsAndStrategies(
    _vaults: string[],
    _strategies: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  announcer(overrides?: CallOverrides): Promise<string>;

  bookkeeper(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  controllerTokenMove(
    _recipient: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  created(overrides?: CallOverrides): Promise<BigNumber>;

  dao(overrides?: CallOverrides): Promise<string>;

  doHardWork(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeRewardForwarder(overrides?: CallOverrides): Promise<string>;

  fund(overrides?: CallOverrides): Promise<string>;

  fundDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  fundKeeperTokenMove(
    _fund: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  fundToken(overrides?: CallOverrides): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  hardWorkers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeControllable(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeControllerStorage(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAllowedUser(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  isController(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  isDao(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  isGovernance(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  isHardWorker(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  isRewardDistributor(
    _adr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidStrategy(
    _strategy: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidVault(_vault: string, overrides?: CallOverrides): Promise<boolean>;

  mintAndDistribute(
    totalAmount: BigNumberish,
    _distributor: string,
    _otherNetworkFund: string,
    mintAllAvailable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintHelper(overrides?: CallOverrides): Promise<string>;

  psDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  psNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  psVault(overrides?: CallOverrides): Promise<string>;

  removeFromWhiteList(
    _target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeFromWhiteListMulti(
    _targets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeHardWorker(
    _worker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardDistribution(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  setAnnouncer(
    _newValue: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBookkeeper(
    _bookkeeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDao(
    _dao: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeRewardForwarder(
    _feeRewardForwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFund(
    _newValue: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundNumeratorDenominator(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundToken(
    _newValue: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintHelper(
    _newValue: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPSNumeratorDenominator(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPsVault(
    _newValue: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardDistribution(
    _newRewardDistribution: string[],
    _flag: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardToken(
    _newValue: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVaultController(
    _newValue: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVaultStrategy(
    _target: string,
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVaultStrategyBatch(
    _vaults: string[],
    _strategies: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategies(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  strategyTokenMove(
    _strategy: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTetuProxy(
    _contract: string,
    _implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTetuProxyBatch(
    _contracts: string[],
    _implementations: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultController(overrides?: CallOverrides): Promise<string>;

  vaults(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  whiteList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    addHardWorker(_worker: string, overrides?: CallOverrides): Promise<void>;

    addStrategy(_strategy: string, overrides?: CallOverrides): Promise<void>;

    addToWhiteList(_target: string, overrides?: CallOverrides): Promise<void>;

    addToWhiteListMulti(
      _targets: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addVaultAndStrategy(
      _vault: string,
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addVaultsAndStrategies(
      _vaults: string[],
      _strategies: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    announcer(overrides?: CallOverrides): Promise<string>;

    bookkeeper(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    controllerTokenMove(
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    created(overrides?: CallOverrides): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<string>;

    doHardWork(_vault: string, overrides?: CallOverrides): Promise<void>;

    feeRewardForwarder(overrides?: CallOverrides): Promise<string>;

    fund(overrides?: CallOverrides): Promise<string>;

    fundDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    fundKeeperTokenMove(
      _fund: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fundNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    fundToken(overrides?: CallOverrides): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    hardWorkers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    initializeControllable(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeControllerStorage(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAllowedUser(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    isController(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    isDao(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    isHardWorker(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    isRewardDistributor(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidStrategy(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidVault(_vault: string, overrides?: CallOverrides): Promise<boolean>;

    mintAndDistribute(
      totalAmount: BigNumberish,
      _distributor: string,
      _otherNetworkFund: string,
      mintAllAvailable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    mintHelper(overrides?: CallOverrides): Promise<string>;

    psDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    psNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    psVault(overrides?: CallOverrides): Promise<string>;

    removeFromWhiteList(
      _target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromWhiteListMulti(
      _targets: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeHardWorker(_worker: string, overrides?: CallOverrides): Promise<void>;

    rewardDistribution(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    setAnnouncer(_newValue: string, overrides?: CallOverrides): Promise<void>;

    setBookkeeper(
      _bookkeeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDao(_dao: string, overrides?: CallOverrides): Promise<void>;

    setFeeRewardForwarder(
      _feeRewardForwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFund(_newValue: string, overrides?: CallOverrides): Promise<void>;

    setFundNumeratorDenominator(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundToken(_newValue: string, overrides?: CallOverrides): Promise<void>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintHelper(_newValue: string, overrides?: CallOverrides): Promise<void>;

    setPSNumeratorDenominator(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPsVault(_newValue: string, overrides?: CallOverrides): Promise<void>;

    setRewardDistribution(
      _newRewardDistribution: string[],
      _flag: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardToken(_newValue: string, overrides?: CallOverrides): Promise<void>;

    setVaultController(
      _newValue: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultStrategy(
      _target: string,
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultStrategyBatch(
      _vaults: string[],
      _strategies: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    strategies(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    strategyTokenMove(
      _strategy: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTetuProxy(
      _contract: string,
      _implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTetuProxyBatch(
      _contracts: string[],
      _implementations: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    vaultController(overrides?: CallOverrides): Promise<string>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    whiteList(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    AddedToWhiteList(
      value?: null
    ): TypedEventFilter<[string], { value: string }>;

    ControllerTokenMoved(
      recipient?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { recipient: string; token: string; amount: BigNumber }
    >;

    FundKeeperTokenMoved(
      fund?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { fund: string; token: string; amount: BigNumber }
    >;

    HardWorkerAdded(
      value?: null
    ): TypedEventFilter<[string], { value: string }>;

    HardWorkerRemoved(
      value?: null
    ): TypedEventFilter<[string], { value: string }>;

    RemovedFromWhiteList(
      value?: null
    ): TypedEventFilter<[string], { value: string }>;

    SharePriceChangeLog(
      vault?: string | null,
      strategy?: string | null,
      oldSharePrice?: null,
      newSharePrice?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        vault: string;
        strategy: string;
        oldSharePrice: BigNumber;
        newSharePrice: BigNumber;
        timestamp: BigNumber;
      }
    >;

    StrategyTokenMoved(
      strategy?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { strategy: string; token: string; amount: BigNumber }
    >;

    UpdateController(
      oldValue?: null,
      newValue?: null
    ): TypedEventFilter<
      [string, string],
      { oldValue: string; newValue: string }
    >;

    UpdatedAddressSlot(
      name?: string | null,
      oldValue?: null,
      newValue?: null
    ): TypedEventFilter<
      [string, string, string],
      { name: string; oldValue: string; newValue: string }
    >;

    UpdatedUint256Slot(
      name?: string | null,
      oldValue?: null,
      newValue?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { name: string; oldValue: BigNumber; newValue: BigNumber }
    >;

    VaultAndStrategyAdded(
      vault?: null,
      strategy?: null
    ): TypedEventFilter<[string, string], { vault: string; strategy: string }>;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addHardWorker(
      _worker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToWhiteList(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToWhiteListMulti(
      _targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addVaultAndStrategy(
      _vault: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addVaultsAndStrategies(
      _vaults: string[],
      _strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    announcer(overrides?: CallOverrides): Promise<BigNumber>;

    bookkeeper(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    controllerTokenMove(
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    created(overrides?: CallOverrides): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    doHardWork(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeRewardForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    fund(overrides?: CallOverrides): Promise<BigNumber>;

    fundDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    fundKeeperTokenMove(
      _fund: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    fundToken(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    hardWorkers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeControllerStorage(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAllowedUser(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isController(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isDao(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isHardWorker(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isRewardDistributor(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidStrategy(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidVault(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    mintAndDistribute(
      totalAmount: BigNumberish,
      _distributor: string,
      _otherNetworkFund: string,
      mintAllAvailable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintHelper(overrides?: CallOverrides): Promise<BigNumber>;

    psDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    psNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    psVault(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromWhiteList(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeFromWhiteListMulti(
      _targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeHardWorker(
      _worker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardDistribution(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    setAnnouncer(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBookkeeper(
      _bookkeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDao(
      _dao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeRewardForwarder(
      _feeRewardForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFund(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundNumeratorDenominator(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundToken(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintHelper(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPSNumeratorDenominator(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPsVault(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardDistribution(
      _newRewardDistribution: string[],
      _flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardToken(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVaultController(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVaultStrategy(
      _target: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVaultStrategyBatch(
      _vaults: string[],
      _strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategies(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    strategyTokenMove(
      _strategy: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTetuProxy(
      _contract: string,
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTetuProxyBatch(
      _contracts: string[],
      _implementations: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultController(overrides?: CallOverrides): Promise<BigNumber>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    whiteList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addHardWorker(
      _worker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToWhiteList(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToWhiteListMulti(
      _targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addVaultAndStrategy(
      _vault: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addVaultsAndStrategies(
      _vaults: string[],
      _strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    announcer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bookkeeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controllerTokenMove(
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    created(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    doHardWork(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeRewardForwarder(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundKeeperTokenMove(
      _fund: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hardWorkers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeControllerStorage(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAllowedUser(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isController(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDao(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGovernance(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isHardWorker(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRewardDistributor(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidStrategy(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintAndDistribute(
      totalAmount: BigNumberish,
      _distributor: string,
      _otherNetworkFund: string,
      mintAllAvailable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    psDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    psNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    psVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromWhiteList(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeFromWhiteListMulti(
      _targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeHardWorker(
      _worker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardDistribution(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAnnouncer(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBookkeeper(
      _bookkeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDao(
      _dao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRewardForwarder(
      _feeRewardForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFund(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundNumeratorDenominator(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundToken(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintHelper(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPSNumeratorDenominator(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPsVault(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardDistribution(
      _newRewardDistribution: string[],
      _flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardToken(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVaultController(
      _newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVaultStrategy(
      _target: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVaultStrategyBatch(
      _vaults: string[],
      _strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strategyTokenMove(
      _strategy: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTetuProxy(
      _contract: string,
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTetuProxyBatch(
      _contracts: string[],
      _implementations: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whiteList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
