/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AnnouncerInterface extends ethers.utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "announceAddressChange(uint8,address)": FunctionFragment;
    "announceMint(uint256,address,address,bool)": FunctionFragment;
    "announceRatioChange(uint8,uint256,uint256)": FunctionFragment;
    "announceStrategyUpgrades(address[],address[])": FunctionFragment;
    "announceTetuProxyUpgrade(address,address)": FunctionFragment;
    "announceTetuProxyUpgradeBatch(address[],address[])": FunctionFragment;
    "announceTokenMove(uint8,address,address,uint256)": FunctionFragment;
    "announceUintChange(uint8,uint256)": FunctionFragment;
    "announceVaultStopBatch(address[])": FunctionFragment;
    "clearAnnounce(bytes32,uint8,address)": FunctionFragment;
    "closeAnnounce(uint8,bytes32,address)": FunctionFragment;
    "controller()": FunctionFragment;
    "created()": FunctionFragment;
    "initialize(address,uint256)": FunctionFragment;
    "initializeControllable(address)": FunctionFragment;
    "isController(address)": FunctionFragment;
    "isGovernance(address)": FunctionFragment;
    "multiOpCodes(uint8)": FunctionFragment;
    "multiTimeLockIndexes(uint8,address)": FunctionFragment;
    "timeLock()": FunctionFragment;
    "timeLockIndexes(uint8)": FunctionFragment;
    "timeLockInfo(uint256)": FunctionFragment;
    "timeLockInfosLength()": FunctionFragment;
    "timeLockSchedule(bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "announceAddressChange",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "announceMint",
    values: [BigNumberish, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "announceRatioChange",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "announceStrategyUpgrades",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "announceTetuProxyUpgrade",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "announceTetuProxyUpgradeBatch",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "announceTokenMove",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "announceUintChange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "announceVaultStopBatch",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "clearAnnounce",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "closeAnnounce",
    values: [BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "created", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeControllable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "multiOpCodes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiTimeLockIndexes",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "timeLock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timeLockIndexes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timeLockInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timeLockInfosLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeLockSchedule",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "announceAddressChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceRatioChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceStrategyUpgrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceTetuProxyUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceTetuProxyUpgradeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceTokenMove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceUintChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceVaultStopBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearAnnounce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeAnnounce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "created", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeControllable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiOpCodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiTimeLockIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timeLock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeLockIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeLockInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeLockInfosLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeLockSchedule",
    data: BytesLike
  ): Result;

  events: {
    "AddressChangeAnnounce(uint8,address)": EventFragment;
    "AnnounceClosed(bytes32)": EventFragment;
    "MintAnnounced(uint256,address,address)": EventFragment;
    "ProxyUpgradeAnnounced(address,address)": EventFragment;
    "RatioChangeAnnounced(uint8,uint256,uint256)": EventFragment;
    "StrategyUpgradeAnnounced(address,address)": EventFragment;
    "TokenMoveAnnounced(uint8,address,address,uint256)": EventFragment;
    "UintChangeAnnounce(uint8,uint256)": EventFragment;
    "UpdateController(address,address)": EventFragment;
    "VaultStop(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressChangeAnnounce"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AnnounceClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintAnnounced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyUpgradeAnnounced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RatioChangeAnnounced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyUpgradeAnnounced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMoveAnnounced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UintChangeAnnounce"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultStop"): EventFragment;
}

export class Announcer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AnnouncerInterface;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    announceAddressChange(
      opCode: BigNumberish,
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    announceMint(
      totalAmount: BigNumberish,
      _distributor: string,
      _otherNetworkFund: string,
      mintAllAvailable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    announceRatioChange(
      opCode: BigNumberish,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    announceStrategyUpgrades(
      _targets: string[],
      _strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    announceTetuProxyUpgrade(
      _contract: string,
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    announceTetuProxyUpgradeBatch(
      _contracts: string[],
      _implementations: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    announceTokenMove(
      opCode: BigNumberish,
      target: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    announceUintChange(
      opCode: BigNumberish,
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    announceVaultStopBatch(
      _vaults: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clearAnnounce(
      opHash: BytesLike,
      opCode: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeAnnounce(
      opCode: BigNumberish,
      opHash: BytesLike,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string] & { adr: string }>;

    created(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ts: BigNumber }>;

    initialize(
      _controller: string,
      _timeLock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isController(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    multiOpCodes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    multiTimeLockIndexes(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    timeLock(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    timeLockIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    timeLockInfo(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, string, string, string[], BigNumber[]] & {
          opCode: number;
          opHash: string;
          target: string;
          adrValues: string[];
          numValues: BigNumber[];
        }
      ]
    >;

    timeLockInfosLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    timeLockSchedule(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  announceAddressChange(
    opCode: BigNumberish,
    newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  announceMint(
    totalAmount: BigNumberish,
    _distributor: string,
    _otherNetworkFund: string,
    mintAllAvailable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  announceRatioChange(
    opCode: BigNumberish,
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  announceStrategyUpgrades(
    _targets: string[],
    _strategies: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  announceTetuProxyUpgrade(
    _contract: string,
    _implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  announceTetuProxyUpgradeBatch(
    _contracts: string[],
    _implementations: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  announceTokenMove(
    opCode: BigNumberish,
    target: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  announceUintChange(
    opCode: BigNumberish,
    newValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  announceVaultStopBatch(
    _vaults: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clearAnnounce(
    opHash: BytesLike,
    opCode: BigNumberish,
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeAnnounce(
    opCode: BigNumberish,
    opHash: BytesLike,
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  created(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _controller: string,
    _timeLock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeControllable(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isController(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  isGovernance(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  multiOpCodes(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  multiTimeLockIndexes(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  timeLock(overrides?: CallOverrides): Promise<BigNumber>;

  timeLockIndexes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  timeLockInfo(
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, string[], BigNumber[]] & {
      opCode: number;
      opHash: string;
      target: string;
      adrValues: string[];
      numValues: BigNumber[];
    }
  >;

  timeLockInfosLength(overrides?: CallOverrides): Promise<BigNumber>;

  timeLockSchedule(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    announceAddressChange(
      opCode: BigNumberish,
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    announceMint(
      totalAmount: BigNumberish,
      _distributor: string,
      _otherNetworkFund: string,
      mintAllAvailable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    announceRatioChange(
      opCode: BigNumberish,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    announceStrategyUpgrades(
      _targets: string[],
      _strategies: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    announceTetuProxyUpgrade(
      _contract: string,
      _implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    announceTetuProxyUpgradeBatch(
      _contracts: string[],
      _implementations: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    announceTokenMove(
      opCode: BigNumberish,
      target: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    announceUintChange(
      opCode: BigNumberish,
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    announceVaultStopBatch(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    clearAnnounce(
      opHash: BytesLike,
      opCode: BigNumberish,
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    closeAnnounce(
      opCode: BigNumberish,
      opHash: BytesLike,
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    created(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _controller: string,
      _timeLock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeControllable(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isController(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    multiOpCodes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multiTimeLockIndexes(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeLock(overrides?: CallOverrides): Promise<BigNumber>;

    timeLockIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeLockInfo(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, string[], BigNumber[]] & {
        opCode: number;
        opHash: string;
        target: string;
        adrValues: string[];
        numValues: BigNumber[];
      }
    >;

    timeLockInfosLength(overrides?: CallOverrides): Promise<BigNumber>;

    timeLockSchedule(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    AddressChangeAnnounce(
      opCode?: null,
      newAddress?: null
    ): TypedEventFilter<
      [number, string],
      { opCode: number; newAddress: string }
    >;

    AnnounceClosed(
      opHash?: null
    ): TypedEventFilter<[string], { opHash: string }>;

    MintAnnounced(
      totalAmount?: null,
      _distributor?: null,
      _otherNetworkFund?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      {
        totalAmount: BigNumber;
        _distributor: string;
        _otherNetworkFund: string;
      }
    >;

    ProxyUpgradeAnnounced(
      _contract?: null,
      _implementation?: null
    ): TypedEventFilter<
      [string, string],
      { _contract: string; _implementation: string }
    >;

    RatioChangeAnnounced(
      opCode?: null,
      numerator?: null,
      denominator?: null
    ): TypedEventFilter<
      [number, BigNumber, BigNumber],
      { opCode: number; numerator: BigNumber; denominator: BigNumber }
    >;

    StrategyUpgradeAnnounced(
      _contract?: null,
      _implementation?: null
    ): TypedEventFilter<
      [string, string],
      { _contract: string; _implementation: string }
    >;

    TokenMoveAnnounced(
      opCode?: null,
      target?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [number, string, string, BigNumber],
      { opCode: number; target: string; token: string; amount: BigNumber }
    >;

    UintChangeAnnounce(
      opCode?: null,
      newValue?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { opCode: number; newValue: BigNumber }
    >;

    UpdateController(
      oldValue?: null,
      newValue?: null
    ): TypedEventFilter<
      [string, string],
      { oldValue: string; newValue: string }
    >;

    VaultStop(
      _contract?: null
    ): TypedEventFilter<[string], { _contract: string }>;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    announceAddressChange(
      opCode: BigNumberish,
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    announceMint(
      totalAmount: BigNumberish,
      _distributor: string,
      _otherNetworkFund: string,
      mintAllAvailable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    announceRatioChange(
      opCode: BigNumberish,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    announceStrategyUpgrades(
      _targets: string[],
      _strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    announceTetuProxyUpgrade(
      _contract: string,
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    announceTetuProxyUpgradeBatch(
      _contracts: string[],
      _implementations: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    announceTokenMove(
      opCode: BigNumberish,
      target: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    announceUintChange(
      opCode: BigNumberish,
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    announceVaultStopBatch(
      _vaults: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clearAnnounce(
      opHash: BytesLike,
      opCode: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeAnnounce(
      opCode: BigNumberish,
      opHash: BytesLike,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    created(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _controller: string,
      _timeLock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isController(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    multiOpCodes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiTimeLockIndexes(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeLock(overrides?: CallOverrides): Promise<BigNumber>;

    timeLockIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeLockInfo(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeLockInfosLength(overrides?: CallOverrides): Promise<BigNumber>;

    timeLockSchedule(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    announceAddressChange(
      opCode: BigNumberish,
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    announceMint(
      totalAmount: BigNumberish,
      _distributor: string,
      _otherNetworkFund: string,
      mintAllAvailable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    announceRatioChange(
      opCode: BigNumberish,
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    announceStrategyUpgrades(
      _targets: string[],
      _strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    announceTetuProxyUpgrade(
      _contract: string,
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    announceTetuProxyUpgradeBatch(
      _contracts: string[],
      _implementations: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    announceTokenMove(
      opCode: BigNumberish,
      target: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    announceUintChange(
      opCode: BigNumberish,
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    announceVaultStopBatch(
      _vaults: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clearAnnounce(
      opHash: BytesLike,
      opCode: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeAnnounce(
      opCode: BigNumberish,
      opHash: BytesLike,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    created(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _controller: string,
      _timeLock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isController(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGovernance(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiOpCodes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiTimeLockIndexes(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeLockIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeLockInfo(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeLockInfosLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeLockSchedule(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
