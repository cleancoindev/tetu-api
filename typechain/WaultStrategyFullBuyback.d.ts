/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WaultStrategyFullBuybackInterface extends ethers.utils.Interface {
  functions: {
    "STRATEGY_NAME()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "assets()": FunctionFragment;
    "buyBackRatio()": FunctionFragment;
    "computeWaultWeeklyPoolReward()": FunctionFragment;
    "continueInvesting()": FunctionFragment;
    "controller()": FunctionFragment;
    "created()": FunctionFragment;
    "doHardWork()": FunctionFragment;
    "emergencyExit()": FunctionFragment;
    "initializeControllable(address)": FunctionFragment;
    "investAllUnderlying()": FunctionFragment;
    "investedUnderlyingBalance()": FunctionFragment;
    "isController(address)": FunctionFragment;
    "isGovernance(address)": FunctionFragment;
    "pausedInvesting()": FunctionFragment;
    "platform()": FunctionFragment;
    "pool()": FunctionFragment;
    "poolID()": FunctionFragment;
    "poolTotalAmount()": FunctionFragment;
    "poolWeeklyRewardsAmount()": FunctionFragment;
    "readyToClaim()": FunctionFragment;
    "rewardBalance(uint256)": FunctionFragment;
    "rewardPoolBalance()": FunctionFragment;
    "rewardTokens()": FunctionFragment;
    "salvage(address,address,uint256)": FunctionFragment;
    "underlying()": FunctionFragment;
    "underlyingBalance()": FunctionFragment;
    "unsalvageableTokens(address)": FunctionFragment;
    "vault()": FunctionFragment;
    "withdrawAllToVault()": FunctionFragment;
    "withdrawToVault(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "STRATEGY_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "assets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyBackRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeWaultWeeklyPoolReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "continueInvesting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "created", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "doHardWork",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyExit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeControllable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "investAllUnderlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investedUnderlyingBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pausedInvesting",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "platform", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolTotalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolWeeklyRewardsAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "readyToClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPoolBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "salvage",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unsalvageableTokens",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawAllToVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToVault",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "STRATEGY_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyBackRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeWaultWeeklyPoolReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "continueInvesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "created", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doHardWork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeControllable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investAllUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investedUnderlyingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pausedInvesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "platform", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolWeeklyRewardsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readyToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPoolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salvage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsalvageableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToVault",
    data: BytesLike
  ): Result;

  events: {
    "UpdateController(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UpdateController"): EventFragment;
}

export class WaultStrategyFullBuyback extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WaultStrategyFullBuybackInterface;

  functions: {
    STRATEGY_NAME(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    assets(overrides?: CallOverrides): Promise<[string[]]>;

    buyBackRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    computeWaultWeeklyPoolReward(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    continueInvesting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string] & { adr: string }>;

    created(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ts: BigNumber }>;

    doHardWork(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyExit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    investAllUnderlying(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    investedUnderlyingBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    isController(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    pausedInvesting(overrides?: CallOverrides): Promise<[boolean]>;

    platform(overrides?: CallOverrides): Promise<[number]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    poolID(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolTotalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolWeeklyRewardsAmount(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    readyToClaim(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    rewardBalance(
      rewardTokenIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardPoolBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bal: BigNumber }>;

    rewardTokens(overrides?: CallOverrides): Promise<[string[]]>;

    salvage(
      recipient: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    underlyingBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    unsalvageableTokens(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    withdrawAllToVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToVault(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  STRATEGY_NAME(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  assets(overrides?: CallOverrides): Promise<string[]>;

  buyBackRatio(overrides?: CallOverrides): Promise<BigNumber>;

  computeWaultWeeklyPoolReward(overrides?: CallOverrides): Promise<BigNumber>;

  continueInvesting(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  created(overrides?: CallOverrides): Promise<BigNumber>;

  doHardWork(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyExit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeControllable(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  investAllUnderlying(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  investedUnderlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

  isController(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  isGovernance(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  pausedInvesting(overrides?: CallOverrides): Promise<boolean>;

  platform(overrides?: CallOverrides): Promise<number>;

  pool(overrides?: CallOverrides): Promise<string>;

  poolID(overrides?: CallOverrides): Promise<BigNumber>;

  poolTotalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  poolWeeklyRewardsAmount(overrides?: CallOverrides): Promise<BigNumber[]>;

  readyToClaim(overrides?: CallOverrides): Promise<BigNumber[]>;

  rewardBalance(
    rewardTokenIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

  rewardTokens(overrides?: CallOverrides): Promise<string[]>;

  salvage(
    recipient: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  underlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

  unsalvageableTokens(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vault(overrides?: CallOverrides): Promise<string>;

  withdrawAllToVault(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToVault(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    STRATEGY_NAME(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    assets(overrides?: CallOverrides): Promise<string[]>;

    buyBackRatio(overrides?: CallOverrides): Promise<BigNumber>;

    computeWaultWeeklyPoolReward(overrides?: CallOverrides): Promise<BigNumber>;

    continueInvesting(overrides?: CallOverrides): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    created(overrides?: CallOverrides): Promise<BigNumber>;

    doHardWork(overrides?: CallOverrides): Promise<void>;

    emergencyExit(overrides?: CallOverrides): Promise<void>;

    initializeControllable(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    investAllUnderlying(overrides?: CallOverrides): Promise<void>;

    investedUnderlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

    isController(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    pausedInvesting(overrides?: CallOverrides): Promise<boolean>;

    platform(overrides?: CallOverrides): Promise<number>;

    pool(overrides?: CallOverrides): Promise<string>;

    poolID(overrides?: CallOverrides): Promise<BigNumber>;

    poolTotalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    poolWeeklyRewardsAmount(overrides?: CallOverrides): Promise<BigNumber[]>;

    readyToClaim(overrides?: CallOverrides): Promise<BigNumber[]>;

    rewardBalance(
      rewardTokenIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(overrides?: CallOverrides): Promise<string[]>;

    salvage(
      recipient: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    underlying(overrides?: CallOverrides): Promise<string>;

    underlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

    unsalvageableTokens(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vault(overrides?: CallOverrides): Promise<string>;

    withdrawAllToVault(overrides?: CallOverrides): Promise<void>;

    withdrawToVault(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    UpdateController(
      oldValue?: null,
      newValue?: null
    ): TypedEventFilter<
      [string, string],
      { oldValue: string; newValue: string }
    >;
  };

  estimateGas: {
    STRATEGY_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    assets(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackRatio(overrides?: CallOverrides): Promise<BigNumber>;

    computeWaultWeeklyPoolReward(overrides?: CallOverrides): Promise<BigNumber>;

    continueInvesting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    created(overrides?: CallOverrides): Promise<BigNumber>;

    doHardWork(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyExit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    investAllUnderlying(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    investedUnderlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

    isController(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isGovernance(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    pausedInvesting(overrides?: CallOverrides): Promise<BigNumber>;

    platform(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    poolID(overrides?: CallOverrides): Promise<BigNumber>;

    poolTotalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    poolWeeklyRewardsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    readyToClaim(overrides?: CallOverrides): Promise<BigNumber>;

    rewardBalance(
      rewardTokenIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(overrides?: CallOverrides): Promise<BigNumber>;

    salvage(
      recipient: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

    unsalvageableTokens(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAllToVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToVault(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    STRATEGY_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyBackRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    computeWaultWeeklyPoolReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    continueInvesting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    created(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    doHardWork(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyExit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeControllable(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    investAllUnderlying(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    investedUnderlyingBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isController(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGovernance(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pausedInvesting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platform(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolTotalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolWeeklyRewardsAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readyToClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardBalance(
      rewardTokenIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPoolBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    salvage(
      recipient: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unsalvageableTokens(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawAllToVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToVault(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
