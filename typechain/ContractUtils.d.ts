/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ContractUtilsInterface extends ethers.utils.Interface {
  functions: {
    "erc20Balances(address[],address)": FunctionFragment;
    "erc20BalancesForAddresses(address,address[])": FunctionFragment;
    "erc20Decimals(address[])": FunctionFragment;
    "erc20Names(address[])": FunctionFragment;
    "erc20Symbols(address[])": FunctionFragment;
    "erc20TotalSupply(address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "erc20Balances",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20BalancesForAddresses",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Decimals",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Names",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Symbols",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20TotalSupply",
    values: [string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "erc20Balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20BalancesForAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20Decimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20Names", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "erc20Symbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20TotalSupply",
    data: BytesLike
  ): Result;

  events: {};
}

export class ContractUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ContractUtilsInterface;

  functions: {
    erc20Balances(
      tokens: string[],
      adr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    erc20BalancesForAddresses(
      token: string,
      _addresses: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    erc20Decimals(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    erc20Names(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    erc20Symbols(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    erc20TotalSupply(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;
  };

  erc20Balances(
    tokens: string[],
    adr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  erc20BalancesForAddresses(
    token: string,
    _addresses: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  erc20Decimals(tokens: string[], overrides?: CallOverrides): Promise<number[]>;

  erc20Names(tokens: string[], overrides?: CallOverrides): Promise<string[]>;

  erc20Symbols(tokens: string[], overrides?: CallOverrides): Promise<string[]>;

  erc20TotalSupply(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  callStatic: {
    erc20Balances(
      tokens: string[],
      adr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    erc20BalancesForAddresses(
      token: string,
      _addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    erc20Decimals(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<number[]>;

    erc20Names(tokens: string[], overrides?: CallOverrides): Promise<string[]>;

    erc20Symbols(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    erc20TotalSupply(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    erc20Balances(
      tokens: string[],
      adr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    erc20BalancesForAddresses(
      token: string,
      _addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    erc20Decimals(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    erc20Names(tokens: string[], overrides?: CallOverrides): Promise<BigNumber>;

    erc20Symbols(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    erc20TotalSupply(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    erc20Balances(
      tokens: string[],
      adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erc20BalancesForAddresses(
      token: string,
      _addresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erc20Decimals(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erc20Names(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erc20Symbols(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erc20TotalSupply(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
